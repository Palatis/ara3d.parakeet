// DO NOT EDIT: Autogenerated file created on 2023-03-22 2:06:59 PM. 
using System;
using System.Linq;

namespace Parakeet.Demos.CSharp
{
    public static class CstNodeFactory
    {
        public static CstNode Create(ParserTree node)
        {
            switch (node.Type)
            {
                case "FloatLiteral": return new FloatLiteral(node.Contents);
                case "HexLiteral": return new HexLiteral(node.Contents);
                case "BinaryLiteral": return new BinaryLiteral(node.Contents);
                case "IntegerLiteral": return new IntegerLiteral(node.Contents);
                case "StringLiteral": return new StringLiteral(node.Contents);
                case "CharLiteral": return new CharLiteral(node.Contents);
                case "BooleanLiteral": return new BooleanLiteral(node.Contents);
                case "NullLiteral": return new NullLiteral(node.Contents);
                case "ValueLiteral": return new ValueLiteral(node.Contents);
                case "Literal": return new Literal(node.Children.Select(Create).ToArray());
                case "BinaryOperator": return new BinaryOperator(node.Contents);
                case "CastExpression": return new CastExpression(node.Children.Select(Create).ToArray());
                case "UnaryOperator": return new UnaryOperator(node.Contents);
                case "Indexer": return new Indexer(node.Children.Select(Create).ToArray());
                case "OverloadableOperator": return new OverloadableOperator(node.Contents);
                case "PostfixOperator": return new PostfixOperator(node.Children.Select(Create).ToArray());
                case "Identifier": return new Identifier(node.Contents);
                case "BinaryOperation": return new BinaryOperation(node.Children.Select(Create).ToArray());
                case "TernaryOperation": return new TernaryOperation(node.Children.Select(Create).ToArray());
                case "ParenthesizedExpression": return new ParenthesizedExpression(node.Children.Select(Create).ToArray());
                case "ThrowExpression": return new ThrowExpression(node.Children.Select(Create).ToArray());
                case "LambdaParameter": return new LambdaParameter(node.Children.Select(Create).ToArray());
                case "LambdaParameters": return new LambdaParameters(node.Children.Select(Create).ToArray());
                case "LambdaBody": return new LambdaBody(node.Children.Select(Create).ToArray());
                case "LambdaExpr": return new LambdaExpr(node.Children.Select(Create).ToArray());
                case "MemberAccess": return new MemberAccess(node.Children.Select(Create).ToArray());
                case "ConditionalMemberAccess": return new ConditionalMemberAccess(node.Children.Select(Create).ToArray());
                case "TypeOf": return new TypeOf(node.Children.Select(Create).ToArray());
                case "NameOf": return new NameOf(node.Children.Select(Create).ToArray());
                case "Default": return new Default(node.Children.Select(Create).ToArray());
                case "InitializerClause": return new InitializerClause(node.Children.Select(Create).ToArray());
                case "Initializer": return new Initializer(node.Children.Select(Create).ToArray());
                case "ArraySizeSpecifier": return new ArraySizeSpecifier(node.Children.Select(Create).ToArray());
                case "NewOperation": return new NewOperation(node.Children.Select(Create).ToArray());
                case "IsOperation": return new IsOperation(node.Children.Select(Create).ToArray());
                case "AsOperation": return new AsOperation(node.Children.Select(Create).ToArray());
                case "StringInterpolationContent": return new StringInterpolationContent(node.Children.Select(Create).ToArray());
                case "StringInterpolation": return new StringInterpolation(node.Children.Select(Create).ToArray());
                case "FunctionArgKeyword": return new FunctionArgKeyword(node.Contents);
                case "FunctionArg": return new FunctionArg(node.Children.Select(Create).ToArray());
                case "FunctionArgs": return new FunctionArgs(node.Children.Select(Create).ToArray());
                case "LeafExpression": return new LeafExpression(node.Children.Select(Create).ToArray());
                case "Expression": return new Expression(node.Children.Select(Create).ToArray());
                case "ExpressionStatement": return new ExpressionStatement(node.Children.Select(Create).ToArray());
                case "ElseClause": return new ElseClause(node.Children.Select(Create).ToArray());
                case "IfStatement": return new IfStatement(node.Children.Select(Create).ToArray());
                case "WhileStatement": return new WhileStatement(node.Children.Select(Create).ToArray());
                case "DoWhileStatement": return new DoWhileStatement(node.Children.Select(Create).ToArray());
                case "ReturnStatement": return new ReturnStatement(node.Children.Select(Create).ToArray());
                case "BreakStatement": return new BreakStatement(node.Contents);
                case "YieldStatement": return new YieldStatement(node.Children.Select(Create).ToArray());
                case "YieldReturn": return new YieldReturn(node.Children.Select(Create).ToArray());
                case "YieldBreak": return new YieldBreak(node.Contents);
                case "ContinueStatement": return new ContinueStatement(node.Contents);
                case "CompoundStatement": return new CompoundStatement(node.Children.Select(Create).ToArray());
                case "CatchClause": return new CatchClause(node.Children.Select(Create).ToArray());
                case "FinallyClause": return new FinallyClause(node.Children.Select(Create).ToArray());
                case "CaseClause": return new CaseClause(node.Children.Select(Create).ToArray());
                case "SwitchStatement": return new SwitchStatement(node.Children.Select(Create).ToArray());
                case "TryStatement": return new TryStatement(node.Children.Select(Create).ToArray());
                case "ForEachStatement": return new ForEachStatement(node.Children.Select(Create).ToArray());
                case "InitializationClause": return new InitializationClause(node.Children.Select(Create).ToArray());
                case "InvariantClause": return new InvariantClause(node.Children.Select(Create).ToArray());
                case "VariantClause": return new VariantClause(node.Children.Select(Create).ToArray());
                case "ForStatement": return new ForStatement(node.Children.Select(Create).ToArray());
                case "ArrayInitializationValue": return new ArrayInitializationValue(node.Children.Select(Create).ToArray());
                case "InitializationValue": return new InitializationValue(node.Children.Select(Create).ToArray());
                case "Initialization": return new Initialization(node.Children.Select(Create).ToArray());
                case "VarDecl": return new VarDecl(node.Children.Select(Create).ToArray());
                case "VarDeclStatement": return new VarDeclStatement(node.Children.Select(Create).ToArray());
                case "Statement": return new Statement(node.Children.Select(Create).ToArray());
                case "QualifiedIdentifier": return new QualifiedIdentifier(node.Children.Select(Create).ToArray());
                case "Static": return new Static(node.Contents);
                case "UsingDirective": return new UsingDirective(node.Children.Select(Create).ToArray());
                case "Modifier": return new Modifier(node.Contents);
                case "AccessSpecifier": return new AccessSpecifier(node.Contents);
                case "Attribute": return new Attribute(node.Children.Select(Create).ToArray());
                case "AttributeList": return new AttributeList(node.Children.Select(Create).ToArray());
                case "DeclarationPreamble": return new DeclarationPreamble(node.Children.Select(Create).ToArray());
                case "TypeVariance": return new TypeVariance(node.Contents);
                case "TypeParameter": return new TypeParameter(node.Children.Select(Create).ToArray());
                case "TypeParameterList": return new TypeParameterList(node.Children.Select(Create).ToArray());
                case "BaseClassList": return new BaseClassList(node.Children.Select(Create).ToArray());
                case "Constraint": return new Constraint(node.Children.Select(Create).ToArray());
                case "ConstraintClause": return new ConstraintClause(node.Children.Select(Create).ToArray());
                case "ConstraintList": return new ConstraintList(node.Children.Select(Create).ToArray());
                case "Kind": return new Kind(node.Contents);
                case "TypeDeclaration": return new TypeDeclaration(node.Children.Select(Create).ToArray());
                case "TypeDeclarationWithPreamble": return new TypeDeclarationWithPreamble(node.Children.Select(Create).ToArray());
                case "FunctionParameterKeywords": return new FunctionParameterKeywords(node.Contents);
                case "DefaultValue": return new DefaultValue(node.Children.Select(Create).ToArray());
                case "FunctionParameter": return new FunctionParameter(node.Children.Select(Create).ToArray());
                case "FunctionParameterList": return new FunctionParameterList(node.Children.Select(Create).ToArray());
                case "ExpressionBody": return new ExpressionBody(node.Children.Select(Create).ToArray());
                case "FunctionBody": return new FunctionBody(node.Children.Select(Create).ToArray());
                case "BaseCall": return new BaseCall(node.Children.Select(Create).ToArray());
                case "ThisCall": return new ThisCall(node.Children.Select(Create).ToArray());
                case "BaseOrThisCall": return new BaseOrThisCall(node.Children.Select(Create).ToArray());
                case "ConstructorDeclaration": return new ConstructorDeclaration(node.Children.Select(Create).ToArray());
                case "MethodDeclaration": return new MethodDeclaration(node.Children.Select(Create).ToArray());
                case "FieldDeclaration": return new FieldDeclaration(node.Children.Select(Create).ToArray());
                case "Getter": return new Getter(node.Children.Select(Create).ToArray());
                case "Setter": return new Setter(node.Children.Select(Create).ToArray());
                case "Initter": return new Initter(node.Children.Select(Create).ToArray());
                case "PropertyClauses": return new PropertyClauses(node.Children.Select(Create).ToArray());
                case "PropertyBody": return new PropertyBody(node.Children.Select(Create).ToArray());
                case "PropertyDeclaration": return new PropertyDeclaration(node.Children.Select(Create).ToArray());
                case "IndexerDeclaration": return new IndexerDeclaration(node.Children.Select(Create).ToArray());
                case "OperatorDeclaration": return new OperatorDeclaration(node.Children.Select(Create).ToArray());
                case "ImplicitOrExplicit": return new ImplicitOrExplicit(node.Contents);
                case "ConverterDeclaration": return new ConverterDeclaration(node.Children.Select(Create).ToArray());
                case "MemberDeclaration": return new MemberDeclaration(node.Children.Select(Create).ToArray());
                case "NamespaceDeclaration": return new NamespaceDeclaration(node.Children.Select(Create).ToArray());
                case "File": return new File(node.Children.Select(Create).ToArray());
                case "ArrayRankSpecifier": return new ArrayRankSpecifier(node.Contents);
                case "ArrayRankSpecifiers": return new ArrayRankSpecifiers(node.Children.Select(Create).ToArray());
                case "TypeArgList": return new TypeArgList(node.Children.Select(Create).ToArray());
                case "Nullable": return new Nullable(node.Contents);
                case "CompoundTypeExpr": return new CompoundTypeExpr(node.Children.Select(Create).ToArray());
                case "InnerTypeExpr": return new InnerTypeExpr(node.Children.Select(Create).ToArray());
                case "TypeExpr": return new TypeExpr(node.Children.Select(Create).ToArray());
                case "Separator": return new Separator(node.Children.Select(Create).ToArray());
                case "TypeKeyword": return new TypeKeyword(node.Contents);
                case "StatementKeyword": return new StatementKeyword(node.Contents);
                case "Token": return new Token(node.Children.Select(Create).ToArray());
                case "TokenGroup": return new TokenGroup(node.Children.Select(Create).ToArray());
                case "TypeStructure": return new TypeStructure(node.Children.Select(Create).ToArray());
                case "StatementStructure": return new StatementStructure(node.Children.Select(Create).ToArray());
                case "Element": return new Element(node.Children.Select(Create).ToArray());
                case "BracedStructure": return new BracedStructure(node.Children.Select(Create).ToArray());
                case "BracketedStructure": return new BracketedStructure(node.Children.Select(Create).ToArray());
                case "ParenthesizedStructure": return new ParenthesizedStructure(node.Children.Select(Create).ToArray());
                case "Structure": return new Structure(node.Children.Select(Create).ToArray());
                case "FileStructure": return new FileStructure(node.Children.Select(Create).ToArray());
                default: throw new Exception($"Unrecognized parse node {node.Type}");
            }
        }
    }
}
