// DO NOT EDIT: Autogenerated file created on 2023-03-22 2:06:59 PM. 
using System;
using System.Linq;

namespace Parakeet.Demos.Json
{
    // Original Rule: (Integer+(Fraction)?+(Exponent)?)
    // Only Nodes: 
    public class Number : CstNode
    {
        public Number(params CstNode[] children) : base(children) { }
        public override CstNode Transform(Func<CstNode, CstNode> f) => new Number(Children.Select(f).ToArray());
        // No children
    }

    // Original Rule: ('"'+_RECOVER_+(StringChar)*+'"')
    // Only Nodes: 
    public class String : CstNode
    {
        public String(params CstNode[] children) : base(children) { }
        public override CstNode Transform(Func<CstNode, CstNode> f) => new String(Children.Select(f).ToArray());
        // No children
    }

    // Original Rule: (("false"|"true"|"null")+!(IdentifierChar))
    // Only Nodes: 
    public class Constant : CstNode
    {
        public Constant(params CstNode[] children) : base(children) { }
        public override CstNode Transform(Func<CstNode, CstNode> f) => new Constant(Children.Select(f).ToArray());
        // No children
    }

    // Original Rule: ('['+_RECOVER_+WS+(Elements)?+WS+']')
    // Only Nodes: (((Element+((Element))*))?)
    public class Array : CstSequence
    {
        public Array(params CstNode[] children) : base(children) { }
        public override CstNode Transform(Func<CstNode, CstNode> f) => new Array(Children.Select(f).ToArray());
        public CstOptional<CstNode> SequenceRule => Children[0] as CstOptional<CstNode>;
    }

    // Original Rule: (String+_RECOVER_+WS+':'+WS+Element)
    // Only Nodes: (String+Element)
    public class Member : CstSequence
    {
        public Member(params CstNode[] children) : base(children) { }
        public override CstNode Transform(Func<CstNode, CstNode> f) => new Member(Children.Select(f).ToArray());
        public String String => Children[0] as String;
        public Element Element => Children[1] as Element;
    }

    // Original Rule: ('{'+_RECOVER_+WS+(Members)?+'}')
    // Only Nodes: (((Member+((Member))*))?)
    public class Object : CstSequence
    {
        public Object(params CstNode[] children) : base(children) { }
        public override CstNode Transform(Func<CstNode, CstNode> f) => new Object(Children.Select(f).ToArray());
        public CstOptional<CstNode> SequenceRule => Children[0] as CstOptional<CstNode>;
    }

    // Original Rule: (Object|Array|String|Number|Constant)
    // Only Nodes: (Object|Array|String|Number|Constant)
    public class Element : CstChoice
    {
        public Element(params CstNode[] children) : base(children) { }
        public override CstNode Transform(Func<CstNode, CstNode> f) => new Element(Children.Select(f).ToArray());
        public Object Object => Children[0] as Object;
        public Array Array => Children[0] as Array;
        public String String => Children[0] as String;
        public Number Number => Children[0] as Number;
        public Constant Constant => Children[0] as Constant;
    }

    // Original Rule: (WS+Element+WS)
    // Only Nodes: (Element)
    public class Json : CstSequence
    {
        public Json(params CstNode[] children) : base(children) { }
        public override CstNode Transform(Func<CstNode, CstNode> f) => new Json(Children.Select(f).ToArray());
        public Element Element => Children[0] as Element;
    }

}
