using Ara3D.Parakeet.Grammars;
using Ara3D.Utils;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace Ara3D.Parakeet.CstGenerator
{
    internal class Program
    {
        public static IEnumerable<Grammar> Grammars => AllGrammars.Grammars;

        static void Main(string[] args)
        {
            Console.WriteLine();

            var outputDir = Path.GetFullPath(args[0]);
            Console.WriteLine($"Output folder root: {outputDir}");

            var outputCsDir = Path.Combine(outputDir, "GeneratedCst");
            var outputGrammarDir = Path.Combine(outputDir, "Grammars");
            Console.WriteLine($"\tC# folder: {outputCsDir}");
            Console.WriteLine($"\tgrammar folder: {outputGrammarDir}");

            if (!Directory.Exists(outputCsDir))
                Directory.CreateDirectory(outputCsDir);
            if (!Directory.Exists(outputGrammarDir))
                Directory.CreateDirectory(outputGrammarDir);

            var factories = new CodeBuilder();
            factories.WriteLine($"// DO NOT EDIT: Autogenerated file created on {DateTime.Now}. ");
            factories.WriteLine("namespace Ara3D.Parakeet.Cst");
            factories.WriteStartBlock();
            factories.WriteLine("public static class AllCstFactories");
            factories.WriteStartBlock();

            Console.WriteLine($"Generating CST files for:");
            foreach (var g in Grammars)
            {
                var fullname = g.GetType().FullName;
                var name = g.GetType().Name;
                Console.WriteLine($"\t{fullname}");

                var ns = $"Ara3D.Parakeet.Cst.{name}NameSpace";

                var nodesFile = Path.Combine(outputCsDir, $"{name}CstNodes.g.cs");
                var grammarFile = Path.Combine(outputGrammarDir, $"{name}.txt");
                var (wroteNodes, wroteGrammar) = _WriteNodesCs(g, ns, nodesFile, grammarFile);
                if (wroteGrammar)
                    Console.WriteLine($"\t\tGrammar: {grammarFile}");
                if (wroteNodes)
                    Console.WriteLine($"\t\tNodes: {nodesFile}");

                var factoryFile = Path.Combine(outputCsDir, $"{name}CstFactory.g.cs");
                var wroteFactory = _WriteFactoryCs(g, ns, factoryFile);
                if (wroteFactory)
                    Console.WriteLine($"\t\tFactory: {factoryFile}");

                factories.WriteLine($"public static CstNode {name.RemoveSuffix("Grammar")}(ParserTreeNode input) => (new {ns}.CstNodeFactory()).Create(input);");
            }
            factories.WriteEndBlock();
            factories.WriteEndBlock();

            var factoriesFile = Path.Combine(outputCsDir, $"AllCstFactories.g.cs");
            bool wroteFactories = _WriteIfDifferent(factoriesFile, factories.ToString(), 1); // skip date on first line
            if (wroteFactories)
                Console.WriteLine($"Factories: {factoriesFile}");

            Console.WriteLine();
        }

        private static (bool nodes, bool grammar) _WriteNodesCs(Grammar g, string ns, string nodesFile, string grammarFile)
        {
            var old = Console.Out;
            try
            {
                using var desc = new StringWriter();
                Console.SetOut(desc);

                var cb = new CodeBuilder();
                CstCodeBuilder.OutputCstClassesFile(cb, g, ns);

                var nodes = _WriteIfDifferent(nodesFile, cb.ToString(), 1); // skip date on first line
                var grammar = _WriteIfDifferent(grammarFile, desc.ToString(), 0);
                return (nodes, grammar);
            }
            finally { Console.SetOut(old); }
        }

        private static bool _WriteFactoryCs(Grammar g, string ns, string output)
        {
            var old = Console.Out;
            try
            {
                using var desc = new StringWriter();
                Console.SetOut(desc);

                var cb = new CodeBuilder();
                CstCodeBuilder.OutputCstFactoryFile(cb, g, ns);
                return _WriteIfDifferent(output, cb.ToString(), 1); // skip date on first line
            }
            finally { Console.SetOut(old); }
        }

        private static bool _WriteIfDifferent(string path, string content, int skipLines)
        {
            if (File.Exists(path))
            {
                var newContent = content.ReplaceLineEndings();
                var oldContent = File.ReadAllText(path).ReplaceLineEndings();

                while (skipLines > 0)
                {
                    {
                        var index = newContent.IndexOf(Environment.NewLine);
                        if (index != -1)
                            newContent = newContent[index..];
                    }
                    {
                        var index = oldContent.IndexOf(Environment.NewLine);
                        if (index != -1)
                            oldContent = oldContent[index..];
                    }
                    --skipLines;
                }

                if (Equals(newContent, oldContent))
                    return false;
            }

            File.WriteAllText(path, content, Encoding.UTF8);
            return true;
        }
    }
}
