// DO NOT EDIT: Autogenerated file created on 2024-03-02 8:35:34 AM. 
using System;
using System.Linq;

namespace Ara3D.Parakeet.Cst.EmailGrammarNameSpace
{
    /// <summary>
    /// Nodes = (Mailbox|Group)
    /// </summary>
    public class CstAddress : CstNodeChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.Address;
        public CstAddress(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstMailbox> Mailbox => new CstNodeFilter<CstMailbox> (Children);
        public CstNodeFilter<CstGroup> Group => new CstNodeFilter<CstGroup> (Children);
    }

    /// <summary>
    /// Nodes = (Address)+
    /// </summary>
    public class CstAddressList : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.AddressList;
        public CstAddressList(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstAddress> Address => new CstNodeFilter<CstAddress> (Children);
    }

    /// <summary>
    /// Nodes = (LocalPart+Domain)
    /// </summary>
    public class CstAddrSpec : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.AddrSpec;
        public CstAddrSpec(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstLocalPart> LocalPart => new CstNodeFilter<CstLocalPart> (Children);
        public CstNodeFilter<CstDomain> Domain => new CstNodeFilter<CstDomain> (Children);
    }

    /// <summary>
    /// Nodes = ((CFWS)?+AddrSpec+(CFWS)?)
    /// </summary>
    public class CstAngleAddr : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.AngleAddr;
        public CstAngleAddr(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstCFWS> CFWS => new CstNodeFilter<CstCFWS> (Children);
        public CstNodeFilter<CstAddrSpec> AddrSpec => new CstNodeFilter<CstAddrSpec> (Children);
    }

    /// <summary>
    /// Nodes = ((CFWS)?+(CFWS)?)
    /// </summary>
    public class CstAtom : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.Atom;
        public CstAtom(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstCFWS> CFWS => new CstNodeFilter<CstCFWS> (Children);
    }

    /// <summary>
    /// Nodes = (CText|QuotedPair|Comment)
    /// </summary>
    public class CstCContent : CstNodeChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.CContent;
        public CstCContent(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstCText> CText => new CstNodeFilter<CstCText> (Children);
        public CstNodeFilter<CstQuotedPair> QuotedPair => new CstNodeFilter<CstQuotedPair> (Children);
        public CstNodeFilter<CstComment> Comment => new CstNodeFilter<CstComment> (Children);
    }

    /// <summary>
    /// Nodes = (Comment)+
    /// </summary>
    public class CstCFWS : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.CFWS;
        public CstCFWS(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstComment> Comment => new CstNodeFilter<CstComment> (Children);
    }

    /// <summary>
    /// Nodes = (CContent)*
    /// </summary>
    public class CstComment : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.Comment;
        public CstComment(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstCContent> CContent => new CstNodeFilter<CstCContent> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstCText : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.CText;
        public CstCText(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = Phrase
    /// </summary>
    public class CstDisplayName : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.DisplayName;
        public CstDisplayName(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstPhrase> Phrase => new CstNodeFilter<CstPhrase> (Children);
    }

    /// <summary>
    /// Nodes = (DotAtom|DomainLiteral)
    /// </summary>
    public class CstDomain : CstNodeChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.Domain;
        public CstDomain(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstDotAtom> DotAtom => new CstNodeFilter<CstDotAtom> (Children);
        public CstNodeFilter<CstDomainLiteral> DomainLiteral => new CstNodeFilter<CstDomainLiteral> (Children);
    }

    /// <summary>
    /// Nodes = ((CFWS)?+(DText)*+(CFWS)?)
    /// </summary>
    public class CstDomainLiteral : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.DomainLiteral;
        public CstDomainLiteral(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstCFWS> CFWS => new CstNodeFilter<CstCFWS> (Children);
        public CstNodeFilter<CstDText> DText => new CstNodeFilter<CstDText> (Children);
    }

    /// <summary>
    /// Nodes = ((CFWS)?+DotAtomText+(CFWS)?)
    /// </summary>
    public class CstDotAtom : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.DotAtom;
        public CstDotAtom(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstCFWS> CFWS => new CstNodeFilter<CstCFWS> (Children);
        public CstNodeFilter<CstDotAtomText> DotAtomText => new CstNodeFilter<CstDotAtomText> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstDotAtomText : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.DotAtomText;
        public CstDotAtomText(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstDText : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.DText;
        public CstDText(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = (DisplayName+(GroupList)?+(CFWS)?)
    /// </summary>
    public class CstGroup : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.Group;
        public CstGroup(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstDisplayName> DisplayName => new CstNodeFilter<CstDisplayName> (Children);
        public CstNodeFilter<CstGroupList> GroupList => new CstNodeFilter<CstGroupList> (Children);
        public CstNodeFilter<CstCFWS> CFWS => new CstNodeFilter<CstCFWS> (Children);
    }

    /// <summary>
    /// Nodes = (MailboxList|CFWS)
    /// </summary>
    public class CstGroupList : CstNodeChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.GroupList;
        public CstGroupList(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstMailboxList> MailboxList => new CstNodeFilter<CstMailboxList> (Children);
        public CstNodeFilter<CstCFWS> CFWS => new CstNodeFilter<CstCFWS> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstIdentifier : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.Identifier;
        public CstIdentifier(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = (DotAtom|QuotedString)
    /// </summary>
    public class CstLocalPart : CstNodeChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.LocalPart;
        public CstLocalPart(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstDotAtom> DotAtom => new CstNodeFilter<CstDotAtom> (Children);
        public CstNodeFilter<CstQuotedString> QuotedString => new CstNodeFilter<CstQuotedString> (Children);
    }

    /// <summary>
    /// Nodes = (NameAddr|AddrSpec)
    /// </summary>
    public class CstMailbox : CstNodeChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.Mailbox;
        public CstMailbox(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstNameAddr> NameAddr => new CstNodeFilter<CstNameAddr> (Children);
        public CstNodeFilter<CstAddrSpec> AddrSpec => new CstNodeFilter<CstAddrSpec> (Children);
    }

    /// <summary>
    /// Nodes = (Mailbox)+
    /// </summary>
    public class CstMailboxList : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.MailboxList;
        public CstMailboxList(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstMailbox> Mailbox => new CstNodeFilter<CstMailbox> (Children);
    }

    /// <summary>
    /// Nodes = ((DisplayName)?+AngleAddr)
    /// </summary>
    public class CstNameAddr : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.NameAddr;
        public CstNameAddr(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstDisplayName> DisplayName => new CstNodeFilter<CstDisplayName> (Children);
        public CstNodeFilter<CstAngleAddr> AngleAddr => new CstNodeFilter<CstAngleAddr> (Children);
    }

    /// <summary>
    /// Nodes = (Word)+
    /// </summary>
    public class CstPhrase : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.Phrase;
        public CstPhrase(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstWord> Word => new CstNodeFilter<CstWord> (Children);
    }

    /// <summary>
    /// Nodes = QuotedPair
    /// </summary>
    public class CstQContent : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.QContent;
        public CstQContent(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstQuotedPair> QuotedPair => new CstNodeFilter<CstQuotedPair> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstQuotedPair : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.QuotedPair;
        public CstQuotedPair(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = ((CFWS)?+(QContent)*+(CFWS)?)
    /// </summary>
    public class CstQuotedString : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.QuotedString;
        public CstQuotedString(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstCFWS> CFWS => new CstNodeFilter<CstCFWS> (Children);
        public CstNodeFilter<CstQContent> QContent => new CstNodeFilter<CstQContent> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstUnstructured : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.Unstructured;
        public CstUnstructured(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = (Atom|QuotedString)
    /// </summary>
    public class CstWord : CstNodeChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.Word;
        public CstWord(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstAtom> Atom => new CstNodeFilter<CstAtom> (Children);
        public CstNodeFilter<CstQuotedString> QuotedString => new CstNodeFilter<CstQuotedString> (Children);
    }

}
