// DO NOT EDIT: Autogenerated file created on 2024-03-19 2:18:53 PM. 
using System;
using System.Linq;

namespace Ara3D.Parakeet.Cst.CSharpGrammarNameSpace
{
    /// <summary>This interface exists to make it easy to auto-generate type switches</summary>
    public interface ICSharpCstNode { }

    /// <summary>
    /// Rule = AccessSpecifier ::= ((Keyword('protected')|Keyword('internal')|Keyword('private')|Keyword('public'))+WS)
    /// Nodes = 
    /// </summary>
    public class CstAccessSpecifier : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.AccessSpecifier;
        public CstAccessSpecifier(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = ArrayInitializationValue ::= (('{'+WS+_UNKNOWN_+(((Expression+WS+((Comma+Expression+WS))*)+(Comma)?))?+WS+'}'+WS)+WS)
    /// Nodes = (Expression)*
    /// </summary>
    public class CstArrayInitializationValue : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ArrayInitializationValue;
        public CstArrayInitializationValue(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = ArrayRankSpecifier ::= (('['+WS+_UNKNOWN_+(Comma)*+WS+']'+WS)+WS)
    /// Nodes = 
    /// </summary>
    public class CstArrayRankSpecifier : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ArrayRankSpecifier;
        public CstArrayRankSpecifier(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = ArrayRankSpecifiers ::= ((ArrayRankSpecifier)*+WS)
    /// Nodes = (ArrayRankSpecifier)*
    /// </summary>
    public class CstArrayRankSpecifiers : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ArrayRankSpecifiers;
        public CstArrayRankSpecifiers(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstArrayRankSpecifier> ArrayRankSpecifier => new CstNodeFilter<CstArrayRankSpecifier> (Children);
    }

    /// <summary>
    /// Rule = ArraySizeSpecifier ::= (('['+WS+_UNKNOWN_+Expression+WS+']'+WS)+WS)
    /// Nodes = Expression
    /// </summary>
    public class CstArraySizeSpecifier : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ArraySizeSpecifier;
        public CstArraySizeSpecifier(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = AsOperation ::= ((Keyword('as')+_RECOVER_+TypeExpr+(Identifier)?)+WS)
    /// Nodes = (TypeExpr+(Identifier)?)
    /// </summary>
    public class CstAsOperation : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.AsOperation;
        public CstAsOperation(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
    }

    /// <summary>
    /// Rule = Attribute ::= ((Identifier+(FunctionArgs)?)+WS)
    /// Nodes = (Identifier+(FunctionArgs)?)
    /// </summary>
    public class CstAttribute : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Attribute;
        public CstAttribute(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
        public CstNodeFilter<CstFunctionArgs> FunctionArgs => new CstNodeFilter<CstFunctionArgs> (Children);
    }

    /// <summary>
    /// Rule = AttributeGroup ::= (('['+WS+_UNKNOWN_+(((Attribute+WS+((Comma+Attribute+WS))*)+(Comma)?))?+WS+']'+WS)+WS)
    /// Nodes = (Attribute)*
    /// </summary>
    public class CstAttributeGroup : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.AttributeGroup;
        public CstAttributeGroup(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstAttribute> Attribute => new CstNodeFilter<CstAttribute> (Children);
    }

    /// <summary>
    /// Rule = AttributeList ::= ((AttributeGroup)*+WS)
    /// Nodes = (AttributeGroup)*
    /// </summary>
    public class CstAttributeList : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.AttributeList;
        public CstAttributeList(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstAttributeGroup> AttributeGroup => new CstNodeFilter<CstAttributeGroup> (Children);
    }

    /// <summary>
    /// Rule = BaseCall ::= ((Keyword('base')+_RECOVER_+ParenthesizedExpression)+WS)
    /// Nodes = ParenthesizedExpression
    /// </summary>
    public class CstBaseCall : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.BaseCall;
        public CstBaseCall(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstParenthesizedExpression> ParenthesizedExpression => new CstNodeFilter<CstParenthesizedExpression> (Children);
    }

    /// <summary>
    /// Rule = BaseClassList ::= (((Symbol(':')+(((TypeExpr+WS+((Comma+TypeExpr+WS))*)+(Comma)?))?))?+WS)
    /// Nodes = (TypeExpr)*
    /// </summary>
    public class CstBaseClassList : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.BaseClassList;
        public CstBaseClassList(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
    }

    /// <summary>
    /// Rule = BaseOrThisCall ::= (((Symbol(':')+(BaseCall|ThisCall)))?+WS)
    /// Nodes = ((BaseCall|ThisCall))?
    /// </summary>
    public class CstBaseOrThisCall : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.BaseOrThisCall;
        public CstBaseOrThisCall(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstBaseCall> BaseCall => new CstNodeFilter<CstBaseCall> (Children);
        public CstNodeFilter<CstThisCall> ThisCall => new CstNodeFilter<CstThisCall> (Children);
    }

    /// <summary>
    /// Rule = BinaryLiteral ::= (("0b"|("0B"+(BinDigit)++(IntegerSuffix)?))+WS)
    /// Nodes = 
    /// </summary>
    public class CstBinaryLiteral : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.BinaryLiteral;
        public CstBinaryLiteral(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = BinaryOperation ::= ((!("=>")+BinaryOperator+_RECOVER_+Expression)+WS)
    /// Nodes = (BinaryOperator+Expression)
    /// </summary>
    public class CstBinaryOperation : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.BinaryOperation;
        public CstBinaryOperation(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstBinaryOperator> BinaryOperator => new CstNodeFilter<CstBinaryOperator> (Children);
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = BinaryOperator ::= ((Symbol('>>>=')|Symbol('>>>')|Symbol('>>=')|Symbol('<<=')|Symbol('&&=')|Symbol('||=')|Symbol('>>')|Symbol('<<')|Symbol('&&')|Symbol('||')|Symbol('+=')|Symbol('-=')|Symbol('*=')|Symbol('/=')|Symbol('%=')|Symbol('&=')|Symbol('|=')|Symbol('^=')|Symbol('<=')|Symbol('>=')|Symbol('==')|Symbol('!=')|Symbol('??')|Symbol('?=')|Symbol('+')|Symbol('-')|Symbol('*')|Symbol('/')|Symbol('%')|Symbol('&')|Symbol('|')|Symbol('^')|Symbol('=')|Symbol('<')|Symbol('>'))+WS)
    /// Nodes = 
    /// </summary>
    public class CstBinaryOperator : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.BinaryOperator;
        public CstBinaryOperator(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = BooleanLiteral ::= ((Keyword('true')|Keyword('false'))+WS)
    /// Nodes = 
    /// </summary>
    public class CstBooleanLiteral : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.BooleanLiteral;
        public CstBooleanLiteral(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = BracedStructure ::= (('{'+(Element)*+'}')+WS)
    /// Nodes = (Element)*
    /// </summary>
    public class CstBracedStructure : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.BracedStructure;
        public CstBracedStructure(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstElement> Element => new CstNodeFilter<CstElement> (Children);
    }

    /// <summary>
    /// Rule = BracketedStructure ::= (('['+(Element)*+']')+WS)
    /// Nodes = (Element)*
    /// </summary>
    public class CstBracketedStructure : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.BracketedStructure;
        public CstBracketedStructure(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstElement> Element => new CstNodeFilter<CstElement> (Children);
    }

    /// <summary>
    /// Rule = BreakStatement ::= ((Keyword('break')+_RECOVER_+EOS)+WS)
    /// Nodes = 
    /// </summary>
    public class CstBreakStatement : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.BreakStatement;
        public CstBreakStatement(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = CaseClause ::= (((Keyword('default')|(Keyword('case')+_RECOVER_+Expression))+Statement)+WS)
    /// Nodes = (Expression+Statement)
    /// </summary>
    public class CstCaseClause : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.CaseClause;
        public CstCaseClause(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
        public CstNodeFilter<CstStatement> Statement => new CstNodeFilter<CstStatement> (Children);
    }

    /// <summary>
    /// Rule = CastExpression ::= (('('+WS+_UNKNOWN_+TypeExpr+WS+')'+WS+Expression)+WS)
    /// Nodes = (TypeExpr+Expression)
    /// </summary>
    public class CstCastExpression : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.CastExpression;
        public CstCastExpression(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = CatchClause ::= ((Keyword('catch')+_RECOVER_+'('+WS+_UNKNOWN_+VarDecl+WS+')'+WS+CompoundStatement)+WS)
    /// Nodes = (VarDecl+CompoundStatement)
    /// </summary>
    public class CstCatchClause : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.CatchClause;
        public CstCatchClause(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstVarDecl> VarDecl => new CstNodeFilter<CstVarDecl> (Children);
        public CstNodeFilter<CstCompoundStatement> CompoundStatement => new CstNodeFilter<CstCompoundStatement> (Children);
    }

    /// <summary>
    /// Rule = CharLiteral ::= (('''+CharLiteralChar+''')+WS)
    /// Nodes = 
    /// </summary>
    public class CstCharLiteral : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.CharLiteral;
        public CstCharLiteral(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = CompoundOrSimpleTypeExpr ::= ((CompoundTypeExpr|SimpleTypExpr)+WS)
    /// Nodes = (CompoundTypeExpr|SimpleTypExpr)
    /// </summary>
    public class CstCompoundOrSimpleTypeExpr : CstNodeChoice, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.CompoundOrSimpleTypeExpr;
        public CstCompoundOrSimpleTypeExpr(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstCompoundTypeExpr> CompoundTypeExpr => new CstNodeFilter<CstCompoundTypeExpr> (Children);
        public CstNodeFilter<CstSimpleTypExpr> SimpleTypExpr => new CstNodeFilter<CstSimpleTypExpr> (Children);
    }

    /// <summary>
    /// Rule = CompoundStatement ::= (('{'+WS+_UNKNOWN_+(Statement)*+WS+'}'+WS)+WS)
    /// Nodes = (Statement)*
    /// </summary>
    public class CstCompoundStatement : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.CompoundStatement;
        public CstCompoundStatement(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstStatement> Statement => new CstNodeFilter<CstStatement> (Children);
    }

    /// <summary>
    /// Rule = CompoundTypeExpr ::= (('('+WS+_UNKNOWN_+(((TypeExpr+WS+((Comma+TypeExpr+WS))*)+(Comma)?))?+WS+')'+WS)+WS)
    /// Nodes = (TypeExpr)*
    /// </summary>
    public class CstCompoundTypeExpr : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.CompoundTypeExpr;
        public CstCompoundTypeExpr(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
    }

    /// <summary>
    /// Rule = ConditionalMemberAccess ::= ((Symbol('?.')+Identifier)+WS)
    /// Nodes = Identifier
    /// </summary>
    public class CstConditionalMemberAccess : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ConditionalMemberAccess;
        public CstConditionalMemberAccess(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
    }

    /// <summary>
    /// Rule = Constraint ::= ((Keyword('class')|Keyword('struct')|TypeExpr)+WS)
    /// Nodes = TypeExpr
    /// </summary>
    public class CstConstraint : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Constraint;
        public CstConstraint(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
    }

    /// <summary>
    /// Rule = ConstraintClause ::= ((Keyword('where')+Identifier+Symbol(':')+TypeExpr)+WS)
    /// Nodes = (Identifier+TypeExpr)
    /// </summary>
    public class CstConstraintClause : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ConstraintClause;
        public CstConstraintClause(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
    }

    /// <summary>
    /// Rule = ConstraintList ::= ((ConstraintClause)*+WS)
    /// Nodes = (ConstraintClause)*
    /// </summary>
    public class CstConstraintList : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ConstraintList;
        public CstConstraintList(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstConstraintClause> ConstraintClause => new CstNodeFilter<CstConstraintClause> (Children);
    }

    /// <summary>
    /// Rule = ConstructorDeclaration ::= ((Identifier+FunctionParameterList+_RECOVER_+BaseOrThisCall+FunctionBody)+WS)
    /// Nodes = (Identifier+FunctionParameterList+BaseOrThisCall+FunctionBody)
    /// </summary>
    public class CstConstructorDeclaration : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ConstructorDeclaration;
        public CstConstructorDeclaration(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
        public CstNodeFilter<CstFunctionParameterList> FunctionParameterList => new CstNodeFilter<CstFunctionParameterList> (Children);
        public CstNodeFilter<CstBaseOrThisCall> BaseOrThisCall => new CstNodeFilter<CstBaseOrThisCall> (Children);
        public CstNodeFilter<CstFunctionBody> FunctionBody => new CstNodeFilter<CstFunctionBody> (Children);
    }

    /// <summary>
    /// Rule = ContinueStatement ::= ((Keyword('continue')+_RECOVER_+EOS)+WS)
    /// Nodes = 
    /// </summary>
    public class CstContinueStatement : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ContinueStatement;
        public CstContinueStatement(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = ConverterDeclaration ::= ((TypeExpr+ImplicitOrExplicit+Keyword('operator')+TypeExpr+FunctionBody)+WS)
    /// Nodes = (TypeExpr+ImplicitOrExplicit+TypeExpr+FunctionBody)
    /// </summary>
    public class CstConverterDeclaration : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ConverterDeclaration;
        public CstConverterDeclaration(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
        public CstNodeFilter<CstImplicitOrExplicit> ImplicitOrExplicit => new CstNodeFilter<CstImplicitOrExplicit> (Children);
        public CstNodeFilter<CstFunctionBody> FunctionBody => new CstNodeFilter<CstFunctionBody> (Children);
    }

    /// <summary>
    /// Rule = DeclarationPreamble ::= ((AttributeList+((Modifier|AccessSpecifier))*)+WS)
    /// Nodes = (AttributeList+((Modifier|AccessSpecifier))*)
    /// </summary>
    public class CstDeclarationPreamble : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.DeclarationPreamble;
        public CstDeclarationPreamble(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstAttributeList> AttributeList => new CstNodeFilter<CstAttributeList> (Children);
        public CstNodeFilter<CstModifier> Modifier => new CstNodeFilter<CstModifier> (Children);
        public CstNodeFilter<CstAccessSpecifier> AccessSpecifier => new CstNodeFilter<CstAccessSpecifier> (Children);
    }

    /// <summary>
    /// Rule = Default ::= ((Keyword('default')+_RECOVER_+(('('+WS+_UNKNOWN_+TypeExpr+WS+')'+WS))?)+WS)
    /// Nodes = (TypeExpr)?
    /// </summary>
    public class CstDefault : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Default;
        public CstDefault(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
    }

    /// <summary>
    /// Rule = DoWhileStatement ::= ((Keyword('do')+_RECOVER_+Statement+Keyword('while')+ParenthesizedExpression+EOS)+WS)
    /// Nodes = (Statement+ParenthesizedExpression)
    /// </summary>
    public class CstDoWhileStatement : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.DoWhileStatement;
        public CstDoWhileStatement(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstStatement> Statement => new CstNodeFilter<CstStatement> (Children);
        public CstNodeFilter<CstParenthesizedExpression> ParenthesizedExpression => new CstNodeFilter<CstParenthesizedExpression> (Children);
    }

    /// <summary>
    /// Rule = Element ::= ((Structure|TokenGroup)+WS)
    /// Nodes = (Structure|TokenGroup)
    /// </summary>
    public class CstElement : CstNodeChoice, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Element;
        public CstElement(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstStructure> Structure => new CstNodeFilter<CstStructure> (Children);
        public CstNodeFilter<CstTokenGroup> TokenGroup => new CstNodeFilter<CstTokenGroup> (Children);
    }

    /// <summary>
    /// Rule = ElseClause ::= ((Keyword('else')+_RECOVER_+Statement)+WS)
    /// Nodes = Statement
    /// </summary>
    public class CstElseClause : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ElseClause;
        public CstElseClause(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstStatement> Statement => new CstNodeFilter<CstStatement> (Children);
    }

    /// <summary>
    /// Rule = Expression ::= (InnerExpression+WS)
    /// Nodes = InnerExpression
    /// </summary>
    public class CstExpression : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Expression;
        public CstExpression(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstInnerExpression> InnerExpression => new CstNodeFilter<CstInnerExpression> (Children);
    }

    /// <summary>
    /// Rule = ExpressionBody ::= ((Symbol('=>')+_RECOVER_+((Expression+EOS)|CompoundStatement))+WS)
    /// Nodes = (Expression|CompoundStatement)
    /// </summary>
    public class CstExpressionBody : CstNodeChoice, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ExpressionBody;
        public CstExpressionBody(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
        public CstNodeFilter<CstCompoundStatement> CompoundStatement => new CstNodeFilter<CstCompoundStatement> (Children);
    }

    /// <summary>
    /// Rule = ExpressionStatement ::= ((Expression+_RECOVER_+EOS)+WS)
    /// Nodes = Expression
    /// </summary>
    public class CstExpressionStatement : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ExpressionStatement;
        public CstExpressionStatement(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = FieldDeclaration ::= (VarDeclStatement+WS)
    /// Nodes = VarDeclStatement
    /// </summary>
    public class CstFieldDeclaration : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.FieldDeclaration;
        public CstFieldDeclaration(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstVarDeclStatement> VarDeclStatement => new CstNodeFilter<CstVarDeclStatement> (Children);
    }

    /// <summary>
    /// Rule = File ::= ((WS+((!(EndOfInput)+(UsingDirective)*+(NamespaceDeclaration)?))*)+WS)
    /// Nodes = (((UsingDirective)*+(NamespaceDeclaration)?))*
    /// </summary>
    public class CstFile : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.File;
        public CstFile(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstUsingDirective> UsingDirective => new CstNodeFilter<CstUsingDirective> (Children);
        public CstNodeFilter<CstNamespaceDeclaration> NamespaceDeclaration => new CstNodeFilter<CstNamespaceDeclaration> (Children);
    }

    /// <summary>
    /// Rule = FileStructure ::= ((Element)*+WS)
    /// Nodes = (Element)*
    /// </summary>
    public class CstFileStructure : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.FileStructure;
        public CstFileStructure(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstElement> Element => new CstNodeFilter<CstElement> (Children);
    }

    /// <summary>
    /// Rule = FinallyClause ::= ((Keyword('finally')+CompoundStatement)+WS)
    /// Nodes = CompoundStatement
    /// </summary>
    public class CstFinallyClause : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.FinallyClause;
        public CstFinallyClause(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstCompoundStatement> CompoundStatement => new CstNodeFilter<CstCompoundStatement> (Children);
    }

    /// <summary>
    /// Rule = FloatLiteral ::= ((Float+(FloatSuffix)?)+WS)
    /// Nodes = 
    /// </summary>
    public class CstFloatLiteral : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.FloatLiteral;
        public CstFloatLiteral(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = ForEachStatement ::= ((Keyword('foreach')+_RECOVER_+Symbol('(')+TypeExpr+Identifier+Keyword('in')+Expression+Symbol(')')+Statement)+WS)
    /// Nodes = (TypeExpr+Identifier+Expression+Statement)
    /// </summary>
    public class CstForEachStatement : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ForEachStatement;
        public CstForEachStatement(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
        public CstNodeFilter<CstStatement> Statement => new CstNodeFilter<CstStatement> (Children);
    }

    /// <summary>
    /// Rule = ForLoopInit ::= ((VarDecl)?+WS)
    /// Nodes = (VarDecl)?
    /// </summary>
    public class CstForLoopInit : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ForLoopInit;
        public CstForLoopInit(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstVarDecl> VarDecl => new CstNodeFilter<CstVarDecl> (Children);
    }

    /// <summary>
    /// Rule = ForLoopInvariant ::= ((Expression)?+WS)
    /// Nodes = (Expression)?
    /// </summary>
    public class CstForLoopInvariant : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ForLoopInvariant;
        public CstForLoopInvariant(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = ForLoopVariant ::= ((((Expression+WS+((Comma+Expression+WS))*)+(Comma)?))?+WS)
    /// Nodes = (Expression)*
    /// </summary>
    public class CstForLoopVariant : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ForLoopVariant;
        public CstForLoopVariant(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = ForStatement ::= ((Keyword('for')+_RECOVER_+Symbol('(')+ForLoopInit+EOS+ForLoopInvariant+EOS+ForLoopVariant+Symbol(')')+Statement)+WS)
    /// Nodes = (ForLoopInit+ForLoopInvariant+ForLoopVariant+Statement)
    /// </summary>
    public class CstForStatement : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ForStatement;
        public CstForStatement(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstForLoopInit> ForLoopInit => new CstNodeFilter<CstForLoopInit> (Children);
        public CstNodeFilter<CstForLoopInvariant> ForLoopInvariant => new CstNodeFilter<CstForLoopInvariant> (Children);
        public CstNodeFilter<CstForLoopVariant> ForLoopVariant => new CstNodeFilter<CstForLoopVariant> (Children);
        public CstNodeFilter<CstStatement> Statement => new CstNodeFilter<CstStatement> (Children);
    }

    /// <summary>
    /// Rule = FunctionArg ::= (((FunctionArgKeyword)*+Expression)+WS)
    /// Nodes = ((FunctionArgKeyword)*+Expression)
    /// </summary>
    public class CstFunctionArg : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.FunctionArg;
        public CstFunctionArg(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstFunctionArgKeyword> FunctionArgKeyword => new CstNodeFilter<CstFunctionArgKeyword> (Children);
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = FunctionArgKeyword ::= ((Keyword('params')|Keyword('ref')|Keyword('out')|Keyword('in'))+WS)
    /// Nodes = 
    /// </summary>
    public class CstFunctionArgKeyword : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.FunctionArgKeyword;
        public CstFunctionArgKeyword(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = FunctionArgs ::= (('('+WS+_UNKNOWN_+(((FunctionArg+WS+((Comma+FunctionArg+WS))*)+(Comma)?))?+WS+')'+WS)+WS)
    /// Nodes = (FunctionArg)*
    /// </summary>
    public class CstFunctionArgs : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.FunctionArgs;
        public CstFunctionArgs(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstFunctionArg> FunctionArg => new CstNodeFilter<CstFunctionArg> (Children);
    }

    /// <summary>
    /// Rule = FunctionBody ::= ((ExpressionBody|CompoundStatement|EOS)+WS)
    /// Nodes = (ExpressionBody|CompoundStatement)
    /// </summary>
    public class CstFunctionBody : CstNodeChoice, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.FunctionBody;
        public CstFunctionBody(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstExpressionBody> ExpressionBody => new CstNodeFilter<CstExpressionBody> (Children);
        public CstNodeFilter<CstCompoundStatement> CompoundStatement => new CstNodeFilter<CstCompoundStatement> (Children);
    }

    /// <summary>
    /// Rule = FunctionDeclStatement ::= (((Keyword('static'))?+MethodDeclaration)+WS)
    /// Nodes = MethodDeclaration
    /// </summary>
    public class CstFunctionDeclStatement : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.FunctionDeclStatement;
        public CstFunctionDeclStatement(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstMethodDeclaration> MethodDeclaration => new CstNodeFilter<CstMethodDeclaration> (Children);
    }

    /// <summary>
    /// Rule = FunctionParameter ::= ((AttributeList+FunctionParameterKeywords+TypeExpr+Identifier+FunctionParameterDefaultValue)+WS)
    /// Nodes = (AttributeList+FunctionParameterKeywords+TypeExpr+Identifier+FunctionParameterDefaultValue)
    /// </summary>
    public class CstFunctionParameter : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.FunctionParameter;
        public CstFunctionParameter(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstAttributeList> AttributeList => new CstNodeFilter<CstAttributeList> (Children);
        public CstNodeFilter<CstFunctionParameterKeywords> FunctionParameterKeywords => new CstNodeFilter<CstFunctionParameterKeywords> (Children);
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
        public CstNodeFilter<CstFunctionParameterDefaultValue> FunctionParameterDefaultValue => new CstNodeFilter<CstFunctionParameterDefaultValue> (Children);
    }

    /// <summary>
    /// Rule = FunctionParameterDefaultValue ::= (((Symbol('=')+Expression))?+WS)
    /// Nodes = (Expression)?
    /// </summary>
    public class CstFunctionParameterDefaultValue : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.FunctionParameterDefaultValue;
        public CstFunctionParameterDefaultValue(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = FunctionParameterKeywords ::= (((Keyword('params')|Keyword('this')|Keyword('ref')|Keyword('out')|Keyword('in')))?+WS)
    /// Nodes = 
    /// </summary>
    public class CstFunctionParameterKeywords : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.FunctionParameterKeywords;
        public CstFunctionParameterKeywords(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = FunctionParameterList ::= (('('+WS+_UNKNOWN_+(((FunctionParameter+WS+((Comma+FunctionParameter+WS))*)+(Comma)?))?+WS+')'+WS)+WS)
    /// Nodes = (FunctionParameter)*
    /// </summary>
    public class CstFunctionParameterList : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.FunctionParameterList;
        public CstFunctionParameterList(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstFunctionParameter> FunctionParameter => new CstNodeFilter<CstFunctionParameter> (Children);
    }

    /// <summary>
    /// Rule = Getter ::= ((Keyword('get')+_RECOVER_+(EOS|FunctionBody))+WS)
    /// Nodes = FunctionBody
    /// </summary>
    public class CstGetter : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Getter;
        public CstGetter(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstFunctionBody> FunctionBody => new CstNodeFilter<CstFunctionBody> (Children);
    }

    /// <summary>
    /// Rule = HexLiteral ::= ((("0x"|"0X")+(HexDigit)++(IntegerSuffix)?)+WS)
    /// Nodes = 
    /// </summary>
    public class CstHexLiteral : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.HexLiteral;
        public CstHexLiteral(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = Identifier ::= ((IdentifierFirstChar+(IdentifierChar)*)+WS)
    /// Nodes = 
    /// </summary>
    public class CstIdentifier : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Identifier;
        public CstIdentifier(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = IfStatement ::= ((Keyword('if')+_RECOVER_+ParenthesizedExpression+Statement+(ElseClause)?)+WS)
    /// Nodes = (ParenthesizedExpression+Statement+(ElseClause)?)
    /// </summary>
    public class CstIfStatement : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.IfStatement;
        public CstIfStatement(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstParenthesizedExpression> ParenthesizedExpression => new CstNodeFilter<CstParenthesizedExpression> (Children);
        public CstNodeFilter<CstStatement> Statement => new CstNodeFilter<CstStatement> (Children);
        public CstNodeFilter<CstElseClause> ElseClause => new CstNodeFilter<CstElseClause> (Children);
    }

    /// <summary>
    /// Rule = ImplicitOrExplicit ::= ((Keyword('implicit')|Keyword('explicit'))+WS)
    /// Nodes = 
    /// </summary>
    public class CstImplicitOrExplicit : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ImplicitOrExplicit;
        public CstImplicitOrExplicit(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = Indexer ::= (('['+WS+_UNKNOWN_+Expression+WS+']'+WS)+WS)
    /// Nodes = Expression
    /// </summary>
    public class CstIndexer : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Indexer;
        public CstIndexer(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = IndexerDeclaration ::= ((TypeExpr+Keyword('this')+_RECOVER_+'['+WS+_UNKNOWN_+FunctionParameter+WS+']'+WS+PropertyBody)+WS)
    /// Nodes = (TypeExpr+FunctionParameter+PropertyBody)
    /// </summary>
    public class CstIndexerDeclaration : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.IndexerDeclaration;
        public CstIndexerDeclaration(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
        public CstNodeFilter<CstFunctionParameter> FunctionParameter => new CstNodeFilter<CstFunctionParameter> (Children);
        public CstNodeFilter<CstPropertyBody> PropertyBody => new CstNodeFilter<CstPropertyBody> (Children);
    }

    /// <summary>
    /// Rule = Initialization ::= (((Symbol('=')+_RECOVER_+InitializationValue))?+WS)
    /// Nodes = (InitializationValue)?
    /// </summary>
    public class CstInitialization : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Initialization;
        public CstInitialization(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstInitializationValue> InitializationValue => new CstNodeFilter<CstInitializationValue> (Children);
    }

    /// <summary>
    /// Rule = InitializationValue ::= ((ArrayInitializationValue|Expression)+WS)
    /// Nodes = (ArrayInitializationValue|Expression)
    /// </summary>
    public class CstInitializationValue : CstNodeChoice, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.InitializationValue;
        public CstInitializationValue(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstArrayInitializationValue> ArrayInitializationValue => new CstNodeFilter<CstArrayInitializationValue> (Children);
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = Initializer ::= (('{'+WS+_UNKNOWN_+(((InitializerClause+WS+((Comma+InitializerClause+WS))*)+(Comma)?))?+WS+'}'+WS)+WS)
    /// Nodes = (InitializerClause)*
    /// </summary>
    public class CstInitializer : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Initializer;
        public CstInitializer(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstInitializerClause> InitializerClause => new CstNodeFilter<CstInitializerClause> (Children);
    }

    /// <summary>
    /// Rule = InitializerClause ::= (((Identifier+Symbol('=')+_RECOVER_+Expression)|Expression)+WS)
    /// Nodes = ((Identifier)?+Expression)
    /// </summary>
    public class CstInitializerClause : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.InitializerClause;
        public CstInitializerClause(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = Initter ::= ((Keyword('init')+_RECOVER_+(EOS|FunctionBody))+WS)
    /// Nodes = FunctionBody
    /// </summary>
    public class CstInitter : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Initter;
        public CstInitter(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstFunctionBody> FunctionBody => new CstNodeFilter<CstFunctionBody> (Children);
    }

    /// <summary>
    /// Rule = InnerExpression ::= (((PrefixOperator)*+LeafExpression+(PostfixOperator)*)+WS)
    /// Nodes = ((PrefixOperator)*+LeafExpression+(PostfixOperator)*)
    /// </summary>
    public class CstInnerExpression : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.InnerExpression;
        public CstInnerExpression(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstPrefixOperator> PrefixOperator => new CstNodeFilter<CstPrefixOperator> (Children);
        public CstNodeFilter<CstLeafExpression> LeafExpression => new CstNodeFilter<CstLeafExpression> (Children);
        public CstNodeFilter<CstPostfixOperator> PostfixOperator => new CstNodeFilter<CstPostfixOperator> (Children);
    }

    /// <summary>
    /// Rule = InnerTypeExpr ::= ((CompoundOrSimpleTypeExpr+(TypeArgList)?+ArrayRankSpecifiers)+WS)
    /// Nodes = (CompoundOrSimpleTypeExpr+(TypeArgList)?+ArrayRankSpecifiers)
    /// </summary>
    public class CstInnerTypeExpr : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.InnerTypeExpr;
        public CstInnerTypeExpr(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstCompoundOrSimpleTypeExpr> CompoundOrSimpleTypeExpr => new CstNodeFilter<CstCompoundOrSimpleTypeExpr> (Children);
        public CstNodeFilter<CstTypeArgList> TypeArgList => new CstNodeFilter<CstTypeArgList> (Children);
        public CstNodeFilter<CstArrayRankSpecifiers> ArrayRankSpecifiers => new CstNodeFilter<CstArrayRankSpecifiers> (Children);
    }

    /// <summary>
    /// Rule = IntegerLiteral ::= ((Digits+!([DFMdfm])+(IntegerSuffix)?)+WS)
    /// Nodes = 
    /// </summary>
    public class CstIntegerLiteral : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.IntegerLiteral;
        public CstIntegerLiteral(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = IsOperation ::= ((Keyword('is')+_RECOVER_+TypeExpr+(Identifier)?)+WS)
    /// Nodes = (TypeExpr+(Identifier)?)
    /// </summary>
    public class CstIsOperation : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.IsOperation;
        public CstIsOperation(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
    }

    /// <summary>
    /// Rule = Kind ::= ((Keyword('interface')|Keyword('struct')|Keyword('class')|Keyword('enum'))+WS)
    /// Nodes = 
    /// </summary>
    public class CstKind : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Kind;
        public CstKind(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = LambdaBody ::= ((CompoundStatement|Expression)+WS)
    /// Nodes = (CompoundStatement|Expression)
    /// </summary>
    public class CstLambdaBody : CstNodeChoice, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.LambdaBody;
        public CstLambdaBody(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstCompoundStatement> CompoundStatement => new CstNodeFilter<CstCompoundStatement> (Children);
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = LambdaExpr ::= ((LambdaParameters+Symbol('=>')+_RECOVER_+LambdaBody)+WS)
    /// Nodes = (LambdaParameters+LambdaBody)
    /// </summary>
    public class CstLambdaExpr : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.LambdaExpr;
        public CstLambdaExpr(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstLambdaParameters> LambdaParameters => new CstNodeFilter<CstLambdaParameters> (Children);
        public CstNodeFilter<CstLambdaBody> LambdaBody => new CstNodeFilter<CstLambdaBody> (Children);
    }

    /// <summary>
    /// Rule = LambdaParameter ::= (((TypeExpr+Identifier)|Identifier)+WS)
    /// Nodes = ((TypeExpr)?+Identifier)
    /// </summary>
    public class CstLambdaParameter : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.LambdaParameter;
        public CstLambdaParameter(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
    }

    /// <summary>
    /// Rule = LambdaParameters ::= ((LambdaParameter|('('+WS+_UNKNOWN_+(((LambdaParameter+WS+((Comma+LambdaParameter+WS))*)+(Comma)?))?+WS+')'+WS))+WS)
    /// Nodes = (LambdaParameter|(LambdaParameter)*)
    /// </summary>
    public class CstLambdaParameters : CstNodeChoice, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.LambdaParameters;
        public CstLambdaParameters(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstLambdaParameter> LambdaParameter => new CstNodeFilter<CstLambdaParameter> (Children);
    }

    /// <summary>
    /// Rule = LeafExpression ::= ((LambdaExpr|CastExpression|ParenthesizedExpression|ThrowExpression|Literal|TypeOf|NameOf|Default|NewOperation|StringInterpolation|Identifier)+WS)
    /// Nodes = (LambdaExpr|CastExpression|ParenthesizedExpression|ThrowExpression|Literal|TypeOf|NameOf|Default|NewOperation|StringInterpolation|Identifier)
    /// </summary>
    public class CstLeafExpression : CstNodeChoice, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.LeafExpression;
        public CstLeafExpression(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstLambdaExpr> LambdaExpr => new CstNodeFilter<CstLambdaExpr> (Children);
        public CstNodeFilter<CstCastExpression> CastExpression => new CstNodeFilter<CstCastExpression> (Children);
        public CstNodeFilter<CstParenthesizedExpression> ParenthesizedExpression => new CstNodeFilter<CstParenthesizedExpression> (Children);
        public CstNodeFilter<CstThrowExpression> ThrowExpression => new CstNodeFilter<CstThrowExpression> (Children);
        public CstNodeFilter<CstLiteral> Literal => new CstNodeFilter<CstLiteral> (Children);
        public CstNodeFilter<CstTypeOf> TypeOf => new CstNodeFilter<CstTypeOf> (Children);
        public CstNodeFilter<CstNameOf> NameOf => new CstNodeFilter<CstNameOf> (Children);
        public CstNodeFilter<CstDefault> Default => new CstNodeFilter<CstDefault> (Children);
        public CstNodeFilter<CstNewOperation> NewOperation => new CstNodeFilter<CstNewOperation> (Children);
        public CstNodeFilter<CstStringInterpolation> StringInterpolation => new CstNodeFilter<CstStringInterpolation> (Children);
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
    }

    /// <summary>
    /// Rule = Literal ::= ((HexLiteral|BinaryLiteral|FloatLiteral|IntegerLiteral|StringLiteral|CharLiteral|BooleanLiteral|NullLiteral)+WS)
    /// Nodes = (HexLiteral|BinaryLiteral|FloatLiteral|IntegerLiteral|StringLiteral|CharLiteral|BooleanLiteral|NullLiteral)
    /// </summary>
    public class CstLiteral : CstNodeChoice, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Literal;
        public CstLiteral(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstHexLiteral> HexLiteral => new CstNodeFilter<CstHexLiteral> (Children);
        public CstNodeFilter<CstBinaryLiteral> BinaryLiteral => new CstNodeFilter<CstBinaryLiteral> (Children);
        public CstNodeFilter<CstFloatLiteral> FloatLiteral => new CstNodeFilter<CstFloatLiteral> (Children);
        public CstNodeFilter<CstIntegerLiteral> IntegerLiteral => new CstNodeFilter<CstIntegerLiteral> (Children);
        public CstNodeFilter<CstStringLiteral> StringLiteral => new CstNodeFilter<CstStringLiteral> (Children);
        public CstNodeFilter<CstCharLiteral> CharLiteral => new CstNodeFilter<CstCharLiteral> (Children);
        public CstNodeFilter<CstBooleanLiteral> BooleanLiteral => new CstNodeFilter<CstBooleanLiteral> (Children);
        public CstNodeFilter<CstNullLiteral> NullLiteral => new CstNodeFilter<CstNullLiteral> (Children);
    }

    /// <summary>
    /// Rule = MemberAccess ::= ((Symbol('.')+Identifier)+WS)
    /// Nodes = Identifier
    /// </summary>
    public class CstMemberAccess : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.MemberAccess;
        public CstMemberAccess(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
    }

    /// <summary>
    /// Rule = MemberDeclaration ::= ((DeclarationPreamble+(ConstructorDeclaration|MethodDeclaration|IndexerDeclaration|PropertyDeclaration|FieldDeclaration|OperatorDeclaration|ConverterDeclaration|TypeDeclaration))+WS)
    /// Nodes = (DeclarationPreamble+(ConstructorDeclaration|MethodDeclaration|IndexerDeclaration|PropertyDeclaration|FieldDeclaration|OperatorDeclaration|ConverterDeclaration|TypeDeclaration))
    /// </summary>
    public class CstMemberDeclaration : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.MemberDeclaration;
        public CstMemberDeclaration(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstDeclarationPreamble> DeclarationPreamble => new CstNodeFilter<CstDeclarationPreamble> (Children);
        public CstNodeFilter<CstConstructorDeclaration> ConstructorDeclaration => new CstNodeFilter<CstConstructorDeclaration> (Children);
        public CstNodeFilter<CstMethodDeclaration> MethodDeclaration => new CstNodeFilter<CstMethodDeclaration> (Children);
        public CstNodeFilter<CstIndexerDeclaration> IndexerDeclaration => new CstNodeFilter<CstIndexerDeclaration> (Children);
        public CstNodeFilter<CstPropertyDeclaration> PropertyDeclaration => new CstNodeFilter<CstPropertyDeclaration> (Children);
        public CstNodeFilter<CstFieldDeclaration> FieldDeclaration => new CstNodeFilter<CstFieldDeclaration> (Children);
        public CstNodeFilter<CstOperatorDeclaration> OperatorDeclaration => new CstNodeFilter<CstOperatorDeclaration> (Children);
        public CstNodeFilter<CstConverterDeclaration> ConverterDeclaration => new CstNodeFilter<CstConverterDeclaration> (Children);
        public CstNodeFilter<CstTypeDeclaration> TypeDeclaration => new CstNodeFilter<CstTypeDeclaration> (Children);
    }

    /// <summary>
    /// Rule = MethodDeclaration ::= ((TypeExpr+Identifier+FunctionParameterList+_RECOVER_+FunctionBody)+WS)
    /// Nodes = (TypeExpr+Identifier+FunctionParameterList+FunctionBody)
    /// </summary>
    public class CstMethodDeclaration : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.MethodDeclaration;
        public CstMethodDeclaration(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
        public CstNodeFilter<CstFunctionParameterList> FunctionParameterList => new CstNodeFilter<CstFunctionParameterList> (Children);
        public CstNodeFilter<CstFunctionBody> FunctionBody => new CstNodeFilter<CstFunctionBody> (Children);
    }

    /// <summary>
    /// Rule = Modifier ::= ((Keyword('readonly')|Keyword('abstract')|Keyword('partial')|Keyword('virtual')|Keyword('static')|Keyword('sealed')|Keyword('const')|Keyword('ref'))+WS)
    /// Nodes = 
    /// </summary>
    public class CstModifier : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Modifier;
        public CstModifier(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = NameOf ::= ((Keyword('nameof')+_RECOVER_+'('+WS+_UNKNOWN_+Expression+WS+')'+WS)+WS)
    /// Nodes = Expression
    /// </summary>
    public class CstNameOf : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.NameOf;
        public CstNameOf(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = NamespaceDeclaration ::= ((Keyword('namespace')+QualifiedIdentifier+(ImplicitlyOrExplicitlyScopedTypes|('{'+WS+_UNKNOWN_+TypesAndDirectives+WS+'}'+WS)))+WS)
    /// Nodes = (QualifiedIdentifier+((UsingDirective|TypeDeclarationWithPreamble))*)
    /// </summary>
    public class CstNamespaceDeclaration : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.NamespaceDeclaration;
        public CstNamespaceDeclaration(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstQualifiedIdentifier> QualifiedIdentifier => new CstNodeFilter<CstQualifiedIdentifier> (Children);
        public CstNodeFilter<CstUsingDirective> UsingDirective => new CstNodeFilter<CstUsingDirective> (Children);
        public CstNodeFilter<CstTypeDeclarationWithPreamble> TypeDeclarationWithPreamble => new CstNodeFilter<CstTypeDeclarationWithPreamble> (Children);
    }

    /// <summary>
    /// Rule = NewOperation ::= ((Keyword('new')+_RECOVER_+(TypeExpr)?+(FunctionArgs)?+(ArraySizeSpecifier)?+(Initializer)?)+WS)
    /// Nodes = ((TypeExpr)?+(FunctionArgs)?+(ArraySizeSpecifier)?+(Initializer)?)
    /// </summary>
    public class CstNewOperation : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.NewOperation;
        public CstNewOperation(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
        public CstNodeFilter<CstFunctionArgs> FunctionArgs => new CstNodeFilter<CstFunctionArgs> (Children);
        public CstNodeFilter<CstArraySizeSpecifier> ArraySizeSpecifier => new CstNodeFilter<CstArraySizeSpecifier> (Children);
        public CstNodeFilter<CstInitializer> Initializer => new CstNodeFilter<CstInitializer> (Children);
    }

    /// <summary>
    /// Rule = Nullable ::= ((Symbol('?'))?+WS)
    /// Nodes = 
    /// </summary>
    public class CstNullable : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Nullable;
        public CstNullable(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = NullLiteral ::= (Keyword('null')+WS)
    /// Nodes = 
    /// </summary>
    public class CstNullLiteral : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.NullLiteral;
        public CstNullLiteral(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = OperatorDeclaration ::= ((TypeExpr+Keyword('operator')+_RECOVER_+OverloadableOperator+FunctionParameterList+FunctionBody)+WS)
    /// Nodes = (TypeExpr+OverloadableOperator+FunctionParameterList+FunctionBody)
    /// </summary>
    public class CstOperatorDeclaration : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.OperatorDeclaration;
        public CstOperatorDeclaration(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
        public CstNodeFilter<CstOverloadableOperator> OverloadableOperator => new CstNodeFilter<CstOverloadableOperator> (Children);
        public CstNodeFilter<CstFunctionParameterList> FunctionParameterList => new CstNodeFilter<CstFunctionParameterList> (Children);
        public CstNodeFilter<CstFunctionBody> FunctionBody => new CstNodeFilter<CstFunctionBody> (Children);
    }

    /// <summary>
    /// Rule = OverloadableOperator ::= ((Symbol('>>>')|Symbol('++')|Symbol('--')|Symbol('<<')|Symbol('>>')|Symbol('==')|Symbol('!=')|Symbol('<=')|Symbol('>=')|Symbol('+')|Symbol('-')|Symbol('!')|Symbol('~')|Symbol('*')|Symbol('/')|Symbol('%')|Symbol('&')|Symbol('|')|Symbol('^')|Symbol('<')|Symbol('>'))+WS)
    /// Nodes = 
    /// </summary>
    public class CstOverloadableOperator : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.OverloadableOperator;
        public CstOverloadableOperator(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = ParenthesizedExpression ::= (('('+WS+_UNKNOWN_+(((Expression+WS+((Comma+Expression+WS))*)+(Comma)?))?+WS+')'+WS)+WS)
    /// Nodes = (Expression)*
    /// </summary>
    public class CstParenthesizedExpression : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ParenthesizedExpression;
        public CstParenthesizedExpression(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = ParenthesizedStructure ::= (('('+(Element)*+')')+WS)
    /// Nodes = (Element)*
    /// </summary>
    public class CstParenthesizedStructure : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ParenthesizedStructure;
        public CstParenthesizedStructure(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstElement> Element => new CstNodeFilter<CstElement> (Children);
    }

    /// <summary>
    /// Rule = PostfixOperator ::= ((Symbol('++')|Symbol('--')|Symbol('!')|MemberAccess|ConditionalMemberAccess|FunctionArgs|Indexer|TernaryOperation|BinaryOperation|IsOperation|AsOperation)+WS)
    /// Nodes = (MemberAccess|ConditionalMemberAccess|FunctionArgs|Indexer|TernaryOperation|BinaryOperation|IsOperation|AsOperation)
    /// </summary>
    public class CstPostfixOperator : CstNodeChoice, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.PostfixOperator;
        public CstPostfixOperator(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstMemberAccess> MemberAccess => new CstNodeFilter<CstMemberAccess> (Children);
        public CstNodeFilter<CstConditionalMemberAccess> ConditionalMemberAccess => new CstNodeFilter<CstConditionalMemberAccess> (Children);
        public CstNodeFilter<CstFunctionArgs> FunctionArgs => new CstNodeFilter<CstFunctionArgs> (Children);
        public CstNodeFilter<CstIndexer> Indexer => new CstNodeFilter<CstIndexer> (Children);
        public CstNodeFilter<CstTernaryOperation> TernaryOperation => new CstNodeFilter<CstTernaryOperation> (Children);
        public CstNodeFilter<CstBinaryOperation> BinaryOperation => new CstNodeFilter<CstBinaryOperation> (Children);
        public CstNodeFilter<CstIsOperation> IsOperation => new CstNodeFilter<CstIsOperation> (Children);
        public CstNodeFilter<CstAsOperation> AsOperation => new CstNodeFilter<CstAsOperation> (Children);
    }

    /// <summary>
    /// Rule = PrefixOperator ::= ((Symbol('++')|Symbol('--')|Symbol('!')|Symbol('-')|Symbol('+')|Symbol('~'))+WS)
    /// Nodes = 
    /// </summary>
    public class CstPrefixOperator : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.PrefixOperator;
        public CstPrefixOperator(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = PropertyBody ::= ((PropertyExpression|PropertyWithClauses)+WS)
    /// Nodes = (PropertyExpression|PropertyWithClauses)
    /// </summary>
    public class CstPropertyBody : CstNodeChoice, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.PropertyBody;
        public CstPropertyBody(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstPropertyExpression> PropertyExpression => new CstNodeFilter<CstPropertyExpression> (Children);
        public CstNodeFilter<CstPropertyWithClauses> PropertyWithClauses => new CstNodeFilter<CstPropertyWithClauses> (Children);
    }

    /// <summary>
    /// Rule = PropertyClauses ::= (((Getter|Setter|Initter))++WS)
    /// Nodes = ((Getter|Setter|Initter))+
    /// </summary>
    public class CstPropertyClauses : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.PropertyClauses;
        public CstPropertyClauses(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstGetter> Getter => new CstNodeFilter<CstGetter> (Children);
        public CstNodeFilter<CstSetter> Setter => new CstNodeFilter<CstSetter> (Children);
        public CstNodeFilter<CstInitter> Initter => new CstNodeFilter<CstInitter> (Children);
    }

    /// <summary>
    /// Rule = PropertyDeclaration ::= ((TypeExpr+Identifier+PropertyBody)+WS)
    /// Nodes = (TypeExpr+Identifier+PropertyBody)
    /// </summary>
    public class CstPropertyDeclaration : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.PropertyDeclaration;
        public CstPropertyDeclaration(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
        public CstNodeFilter<CstPropertyBody> PropertyBody => new CstNodeFilter<CstPropertyBody> (Children);
    }

    /// <summary>
    /// Rule = PropertyExpression ::= (ExpressionBody+WS)
    /// Nodes = ExpressionBody
    /// </summary>
    public class CstPropertyExpression : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.PropertyExpression;
        public CstPropertyExpression(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstExpressionBody> ExpressionBody => new CstNodeFilter<CstExpressionBody> (Children);
    }

    /// <summary>
    /// Rule = PropertyWithClauses ::= (('{'+WS+_UNKNOWN_+PropertyClauses+WS+'}'+WS+((Initialization+EOS))?)+WS)
    /// Nodes = (PropertyClauses+(Initialization)?)
    /// </summary>
    public class CstPropertyWithClauses : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.PropertyWithClauses;
        public CstPropertyWithClauses(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstPropertyClauses> PropertyClauses => new CstNodeFilter<CstPropertyClauses> (Children);
        public CstNodeFilter<CstInitialization> Initialization => new CstNodeFilter<CstInitialization> (Children);
    }

    /// <summary>
    /// Rule = QualifiedIdentifier ::= ((((Identifier+WS+((Symbol('.')+Identifier+WS))*)+(Symbol('.'))?))?+WS)
    /// Nodes = (Identifier)*
    /// </summary>
    public class CstQualifiedIdentifier : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.QualifiedIdentifier;
        public CstQualifiedIdentifier(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
    }

    /// <summary>
    /// Rule = ReturnStatement ::= ((Keyword('return')+_RECOVER_+(Expression)?+EOS)+WS)
    /// Nodes = (Expression)?
    /// </summary>
    public class CstReturnStatement : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ReturnStatement;
        public CstReturnStatement(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = Script ::= ((WS+(TypeDirectiveOrStatement)*)+WS)
    /// Nodes = (TypeDirectiveOrStatement)*
    /// </summary>
    public class CstScript : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Script;
        public CstScript(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeDirectiveOrStatement> TypeDirectiveOrStatement => new CstNodeFilter<CstTypeDirectiveOrStatement> (Children);
    }

    /// <summary>
    /// Rule = Separator ::= (([\x2C\x2E\x3B]|TypeKeyword|StatementKeyword)+WS)
    /// Nodes = (TypeKeyword|StatementKeyword)
    /// </summary>
    public class CstSeparator : CstNodeChoice, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Separator;
        public CstSeparator(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeKeyword> TypeKeyword => new CstNodeFilter<CstTypeKeyword> (Children);
        public CstNodeFilter<CstStatementKeyword> StatementKeyword => new CstNodeFilter<CstStatementKeyword> (Children);
    }

    /// <summary>
    /// Rule = Setter ::= ((Keyword('set')+_RECOVER_+(EOS|FunctionBody))+WS)
    /// Nodes = FunctionBody
    /// </summary>
    public class CstSetter : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Setter;
        public CstSetter(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstFunctionBody> FunctionBody => new CstNodeFilter<CstFunctionBody> (Children);
    }

    /// <summary>
    /// Rule = SimpleTypExpr ::= (QualifiedIdentifier+WS)
    /// Nodes = QualifiedIdentifier
    /// </summary>
    public class CstSimpleTypExpr : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.SimpleTypExpr;
        public CstSimpleTypExpr(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstQualifiedIdentifier> QualifiedIdentifier => new CstNodeFilter<CstQualifiedIdentifier> (Children);
    }

    /// <summary>
    /// Rule = Statement ::= (InnerStatement+WS)
    /// Nodes = 
    /// </summary>
    public class CstStatement : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Statement;
        public CstStatement(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = StatementKeyword ::= ((Keyword('continue')|Keyword('foreach')|Keyword('finally')|Keyword('default')|Keyword('return')|Keyword('switch')|Keyword('break')|Keyword('throw')|Keyword('catch')|Keyword('using')|Keyword('case')|Keyword('for')|Keyword('try')|Keyword('if')|Keyword('do'))+WS)
    /// Nodes = 
    /// </summary>
    public class CstStatementKeyword : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.StatementKeyword;
        public CstStatementKeyword(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = StatementStructure ::= ((StatementKeyword+TokenGroup+(BracedStructure)?)+WS)
    /// Nodes = (StatementKeyword+TokenGroup+(BracedStructure)?)
    /// </summary>
    public class CstStatementStructure : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.StatementStructure;
        public CstStatementStructure(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstStatementKeyword> StatementKeyword => new CstNodeFilter<CstStatementKeyword> (Children);
        public CstNodeFilter<CstTokenGroup> TokenGroup => new CstNodeFilter<CstTokenGroup> (Children);
        public CstNodeFilter<CstBracedStructure> BracedStructure => new CstNodeFilter<CstBracedStructure> (Children);
    }

    /// <summary>
    /// Rule = Static ::= ((Keyword('static'))?+WS)
    /// Nodes = 
    /// </summary>
    public class CstStatic : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Static;
        public CstStatic(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = StringInterpolation ::= (('$'+_RECOVER_+'"'+(StringInterpolationContent)*+'"')+WS)
    /// Nodes = (StringInterpolationContent)*
    /// </summary>
    public class CstStringInterpolation : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.StringInterpolation;
        public CstStringInterpolation(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstStringInterpolationContent> StringInterpolationContent => new CstNodeFilter<CstStringInterpolationContent> (Children);
    }

    /// <summary>
    /// Rule = StringInterpolationContent ::= ((('{'+WS+_UNKNOWN_+Expression+WS+'}'+WS)|StringLiteralChar)+WS)
    /// Nodes = Expression
    /// </summary>
    public class CstStringInterpolationContent : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.StringInterpolationContent;
        public CstStringInterpolationContent(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = StringLiteral ::= ((('@')?+'"'+(StringLiteralChar)*+'"')+WS)
    /// Nodes = 
    /// </summary>
    public class CstStringLiteral : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.StringLiteral;
        public CstStringLiteral(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = Structure ::= (InnerStructure+WS)
    /// Nodes = 
    /// </summary>
    public class CstStructure : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Structure;
        public CstStructure(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = SwitchStatement ::= ((Keyword('switch')+_RECOVER_+'{'+WS+_UNKNOWN_+(CaseClause)*+WS+'}'+WS)+WS)
    /// Nodes = (CaseClause)*
    /// </summary>
    public class CstSwitchStatement : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.SwitchStatement;
        public CstSwitchStatement(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstCaseClause> CaseClause => new CstNodeFilter<CstCaseClause> (Children);
    }

    /// <summary>
    /// Rule = TernaryOperation ::= ((Symbol('?')+_RECOVER_+Expression+Symbol(':')+Expression)+WS)
    /// Nodes = (Expression+Expression)
    /// </summary>
    public class CstTernaryOperation : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.TernaryOperation;
        public CstTernaryOperation(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = ThisCall ::= ((Keyword('this')+_RECOVER_+ParenthesizedExpression)+WS)
    /// Nodes = ParenthesizedExpression
    /// </summary>
    public class CstThisCall : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ThisCall;
        public CstThisCall(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstParenthesizedExpression> ParenthesizedExpression => new CstNodeFilter<CstParenthesizedExpression> (Children);
    }

    /// <summary>
    /// Rule = ThrowExpression ::= ((Keyword('throw')+_RECOVER_+Expression)+WS)
    /// Nodes = Expression
    /// </summary>
    public class CstThrowExpression : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ThrowExpression;
        public CstThrowExpression(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = Token ::= ((Separator|CppStyleComment|Spaces|([\x21\x23-\x26\x2A+\x2D\x2F\x3A<-\x40^|~])+|Identifier|Literal)+WS)
    /// Nodes = (Separator|Identifier|Literal)
    /// </summary>
    public class CstToken : CstNodeChoice, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Token;
        public CstToken(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstSeparator> Separator => new CstNodeFilter<CstSeparator> (Children);
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
        public CstNodeFilter<CstLiteral> Literal => new CstNodeFilter<CstLiteral> (Children);
    }

    /// <summary>
    /// Rule = TokenGroup ::= (((!([\x28\x29\x5B\x5D\x7B\x7D])+(Token|Separator)))++WS)
    /// Nodes = ((Token|Separator))+
    /// </summary>
    public class CstTokenGroup : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.TokenGroup;
        public CstTokenGroup(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstToken> Token => new CstNodeFilter<CstToken> (Children);
        public CstNodeFilter<CstSeparator> Separator => new CstNodeFilter<CstSeparator> (Children);
    }

    /// <summary>
    /// Rule = TryStatement ::= ((Keyword('try')+_RECOVER_+CompoundStatement+(CatchClause)?+(FinallyClause)?)+WS)
    /// Nodes = (CompoundStatement+(CatchClause)?+(FinallyClause)?)
    /// </summary>
    public class CstTryStatement : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.TryStatement;
        public CstTryStatement(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstCompoundStatement> CompoundStatement => new CstNodeFilter<CstCompoundStatement> (Children);
        public CstNodeFilter<CstCatchClause> CatchClause => new CstNodeFilter<CstCatchClause> (Children);
        public CstNodeFilter<CstFinallyClause> FinallyClause => new CstNodeFilter<CstFinallyClause> (Children);
    }

    /// <summary>
    /// Rule = TypeArgList ::= (('<'+WS+_UNKNOWN_+(((TypeExpr+WS+((Comma+TypeExpr+WS))*)+(Comma)?))?+WS+'>'+WS)+WS)
    /// Nodes = (TypeExpr)*
    /// </summary>
    public class CstTypeArgList : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.TypeArgList;
        public CstTypeArgList(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
    }

    /// <summary>
    /// Rule = TypeDeclaration ::= (InnerTypeDeclaration+WS)
    /// Nodes = 
    /// </summary>
    public class CstTypeDeclaration : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.TypeDeclaration;
        public CstTypeDeclaration(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = TypeDeclarationWithPreamble ::= ((DeclarationPreamble+TypeDeclaration)+WS)
    /// Nodes = (DeclarationPreamble+TypeDeclaration)
    /// </summary>
    public class CstTypeDeclarationWithPreamble : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.TypeDeclarationWithPreamble;
        public CstTypeDeclarationWithPreamble(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstDeclarationPreamble> DeclarationPreamble => new CstNodeFilter<CstDeclarationPreamble> (Children);
        public CstNodeFilter<CstTypeDeclaration> TypeDeclaration => new CstNodeFilter<CstTypeDeclaration> (Children);
    }

    /// <summary>
    /// Rule = TypeDirectiveOrStatement ::= ((UsingDirective|TypeDeclarationWithPreamble|Statement)+WS)
    /// Nodes = (UsingDirective|TypeDeclarationWithPreamble|Statement)
    /// </summary>
    public class CstTypeDirectiveOrStatement : CstNodeChoice, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.TypeDirectiveOrStatement;
        public CstTypeDirectiveOrStatement(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstUsingDirective> UsingDirective => new CstNodeFilter<CstUsingDirective> (Children);
        public CstNodeFilter<CstTypeDeclarationWithPreamble> TypeDeclarationWithPreamble => new CstNodeFilter<CstTypeDeclarationWithPreamble> (Children);
        public CstNodeFilter<CstStatement> Statement => new CstNodeFilter<CstStatement> (Children);
    }

    /// <summary>
    /// Rule = TypeExpr ::= (InnerTypeExpr+WS)
    /// Nodes = InnerTypeExpr
    /// </summary>
    public class CstTypeExpr : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.TypeExpr;
        public CstTypeExpr(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstInnerTypeExpr> InnerTypeExpr => new CstNodeFilter<CstInnerTypeExpr> (Children);
    }

    /// <summary>
    /// Rule = TypeKeyword ::= ((Keyword('interface')|Keyword('struct')|Keyword('class')|Keyword('enum'))+WS)
    /// Nodes = 
    /// </summary>
    public class CstTypeKeyword : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.TypeKeyword;
        public CstTypeKeyword(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = TypeOf ::= ((Keyword('typeof')+_RECOVER_+'('+WS+_UNKNOWN_+TypeExpr+WS+')'+WS)+WS)
    /// Nodes = TypeExpr
    /// </summary>
    public class CstTypeOf : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.TypeOf;
        public CstTypeOf(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
    }

    /// <summary>
    /// Rule = TypeParameter ::= ((TypeVariance+Identifier)+WS)
    /// Nodes = (TypeVariance+Identifier)
    /// </summary>
    public class CstTypeParameter : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.TypeParameter;
        public CstTypeParameter(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeVariance> TypeVariance => new CstNodeFilter<CstTypeVariance> (Children);
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
    }

    /// <summary>
    /// Rule = TypeParameterList ::= ((('<'+WS+_UNKNOWN_+(((TypeParameter+WS+((Comma+TypeParameter+WS))*)+(Comma)?))?+WS+'>'+WS))?+WS)
    /// Nodes = (TypeParameter)*
    /// </summary>
    public class CstTypeParameterList : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.TypeParameterList;
        public CstTypeParameterList(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeParameter> TypeParameter => new CstNodeFilter<CstTypeParameter> (Children);
    }

    /// <summary>
    /// Rule = TypeStructure ::= ((TypeKeyword+TokenGroup+BracedStructure)+WS)
    /// Nodes = (TypeKeyword+TokenGroup+BracedStructure)
    /// </summary>
    public class CstTypeStructure : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.TypeStructure;
        public CstTypeStructure(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeKeyword> TypeKeyword => new CstNodeFilter<CstTypeKeyword> (Children);
        public CstNodeFilter<CstTokenGroup> TokenGroup => new CstNodeFilter<CstTokenGroup> (Children);
        public CstNodeFilter<CstBracedStructure> BracedStructure => new CstNodeFilter<CstBracedStructure> (Children);
    }

    /// <summary>
    /// Rule = TypeVariance ::= (((Keyword('out')|Keyword('in')))?+WS)
    /// Nodes = 
    /// </summary>
    public class CstTypeVariance : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.TypeVariance;
        public CstTypeVariance(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = UsingDirective ::= (((Keyword('global'))?+Keyword('using')+_RECOVER_+Static+QualifiedIdentifier+((Symbol('=')+QualifiedIdentifier))?+EOS)+WS)
    /// Nodes = (Static+QualifiedIdentifier+(QualifiedIdentifier)?)
    /// </summary>
    public class CstUsingDirective : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.UsingDirective;
        public CstUsingDirective(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstStatic> Static => new CstNodeFilter<CstStatic> (Children);
        public CstNodeFilter<CstQualifiedIdentifier> QualifiedIdentifier => new CstNodeFilter<CstQualifiedIdentifier> (Children);
    }

    /// <summary>
    /// Rule = VarDecl ::= ((TypeExpr+(VarWithInitialization+WS+((Comma+VarWithInitialization+WS))*)+(Comma)?)+WS)
    /// Nodes = (TypeExpr+(VarWithInitialization)+)
    /// </summary>
    public class CstVarDecl : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.VarDecl;
        public CstVarDecl(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTypeExpr> TypeExpr => new CstNodeFilter<CstTypeExpr> (Children);
        public CstNodeFilter<CstVarWithInitialization> VarWithInitialization => new CstNodeFilter<CstVarWithInitialization> (Children);
    }

    /// <summary>
    /// Rule = VarDeclStatement ::= ((VarDecl+EOS)+WS)
    /// Nodes = VarDecl
    /// </summary>
    public class CstVarDeclStatement : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.VarDeclStatement;
        public CstVarDeclStatement(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstVarDecl> VarDecl => new CstNodeFilter<CstVarDecl> (Children);
    }

    /// <summary>
    /// Rule = VarWithInitialization ::= ((Identifier+Initialization)+WS)
    /// Nodes = (Identifier+Initialization)
    /// </summary>
    public class CstVarWithInitialization : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.VarWithInitialization;
        public CstVarWithInitialization(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
        public CstNodeFilter<CstInitialization> Initialization => new CstNodeFilter<CstInitialization> (Children);
    }

    /// <summary>
    /// Rule = WhileStatement ::= ((Keyword('while')+_RECOVER_+ParenthesizedExpression+Statement)+WS)
    /// Nodes = (ParenthesizedExpression+Statement)
    /// </summary>
    public class CstWhileStatement : CstNodeSequence, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.WhileStatement;
        public CstWhileStatement(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstParenthesizedExpression> ParenthesizedExpression => new CstNodeFilter<CstParenthesizedExpression> (Children);
        public CstNodeFilter<CstStatement> Statement => new CstNodeFilter<CstStatement> (Children);
    }

    /// <summary>
    /// Rule = YieldBreak ::= ((Keyword('break')+_RECOVER_+EOS)+WS)
    /// Nodes = 
    /// </summary>
    public class CstYieldBreak : CstNodeLeaf, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.YieldBreak;
        public CstYieldBreak(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = YieldReturn ::= ((Keyword('return')+_RECOVER_+Expression+EOS)+WS)
    /// Nodes = Expression
    /// </summary>
    public class CstYieldReturn : CstNode, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.YieldReturn;
        public CstYieldReturn(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstExpression> Expression => new CstNodeFilter<CstExpression> (Children);
    }

    /// <summary>
    /// Rule = YieldStatement ::= ((Keyword('yield')+_RECOVER_+(YieldReturn|YieldBreak))+WS)
    /// Nodes = (YieldReturn|YieldBreak)
    /// </summary>
    public class CstYieldStatement : CstNodeChoice, ICSharpCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.YieldStatement;
        public CstYieldStatement(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstYieldReturn> YieldReturn => new CstNodeFilter<CstYieldReturn> (Children);
        public CstNodeFilter<CstYieldBreak> YieldBreak => new CstNodeFilter<CstYieldBreak> (Children);
    }

}
