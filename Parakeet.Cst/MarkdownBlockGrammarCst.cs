// DO NOT EDIT: Autogenerated file created on 2024-03-02 9:43:36 PM. 
using System;
using System.Linq;

namespace Ara3D.Parakeet.Cst.MarkdownBlockGrammarNameSpace
{
    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstBlankLine : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.BlankLine;
        public CstBlankLine(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = (CodeBlock|Line)
    /// </summary>
    public class CstBlock : CstNodeChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.Block;
        public CstBlock(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstCodeBlock> CodeBlock => new CstNodeFilter<CstCodeBlock> (Children);
        public CstNodeFilter<CstLine> Line => new CstNodeFilter<CstLine> (Children);
    }

    /// <summary>
    /// Nodes = Line
    /// </summary>
    public class CstBlockQuotedLine : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.BlockQuotedLine;
        public CstBlockQuotedLine(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstLine> Line => new CstNodeFilter<CstLine> (Children);
    }

    /// <summary>
    /// Nodes = (CodeBlockLang+CodeBlockText)
    /// </summary>
    public class CstCodeBlock : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.CodeBlock;
        public CstCodeBlock(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstCodeBlockLang> CodeBlockLang => new CstNodeFilter<CstCodeBlockLang> (Children);
        public CstNodeFilter<CstCodeBlockText> CodeBlockText => new CstNodeFilter<CstCodeBlockText> (Children);
    }

    /// <summary>
    /// Nodes = (Identifier)?
    /// </summary>
    public class CstCodeBlockLang : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.CodeBlockLang;
        public CstCodeBlockLang(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstCodeBlockText : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.CodeBlockText;
        public CstCodeBlockText(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = (Block)*
    /// </summary>
    public class CstDocument : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.Document;
        public CstDocument(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstBlock> Block => new CstNodeFilter<CstBlock> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstH1Underline : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.H1Underline;
        public CstH1Underline(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstH2Underline : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.H2Underline;
        public CstH2Underline(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = (HeadingWithOperator|HeadingUnderlined)
    /// </summary>
    public class CstHeading : CstNodeChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.Heading;
        public CstHeading(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstHeadingWithOperator> HeadingWithOperator => new CstNodeFilter<CstHeadingWithOperator> (Children);
        public CstNodeFilter<CstHeadingUnderlined> HeadingUnderlined => new CstNodeFilter<CstHeadingUnderlined> (Children);
    }

    /// <summary>
    /// Nodes = (TextLine+(H1Underline|H2Underline))
    /// </summary>
    public class CstHeadingUnderlined : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.HeadingUnderlined;
        public CstHeadingUnderlined(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstTextLine> TextLine => new CstNodeFilter<CstTextLine> (Children);
        public CstNodeFilter<CstH1Underline> H1Underline => new CstNodeFilter<CstH1Underline> (Children);
        public CstNodeFilter<CstH2Underline> H2Underline => new CstNodeFilter<CstH2Underline> (Children);
    }

    /// <summary>
    /// Nodes = Line
    /// </summary>
    public class CstHeadingWithOperator : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.HeadingWithOperator;
        public CstHeadingWithOperator(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstLine> Line => new CstNodeFilter<CstLine> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstHorizontalLine : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.HorizontalLine;
        public CstHorizontalLine(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstIdentifier : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.Identifier;
        public CstIdentifier(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstIndent : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.Indent;
        public CstIndent(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = (Indent+Line)
    /// </summary>
    public class CstIndentedLine : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.IndentedLine;
        public CstIndentedLine(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstIndent> Indent => new CstNodeFilter<CstIndent> (Children);
        public CstNodeFilter<CstLine> Line => new CstNodeFilter<CstLine> (Children);
    }

    /// <summary>
    /// Nodes = (Heading|HorizontalLine|UnorderedListItem|OrderedListItem|IndentedLine|BlockQuotedLine|BlankLine|TextLine)
    /// </summary>
    public class CstLine : CstNodeChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.Line;
        public CstLine(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstHeading> Heading => new CstNodeFilter<CstHeading> (Children);
        public CstNodeFilter<CstHorizontalLine> HorizontalLine => new CstNodeFilter<CstHorizontalLine> (Children);
        public CstNodeFilter<CstUnorderedListItem> UnorderedListItem => new CstNodeFilter<CstUnorderedListItem> (Children);
        public CstNodeFilter<CstOrderedListItem> OrderedListItem => new CstNodeFilter<CstOrderedListItem> (Children);
        public CstNodeFilter<CstIndentedLine> IndentedLine => new CstNodeFilter<CstIndentedLine> (Children);
        public CstNodeFilter<CstBlockQuotedLine> BlockQuotedLine => new CstNodeFilter<CstBlockQuotedLine> (Children);
        public CstNodeFilter<CstBlankLine> BlankLine => new CstNodeFilter<CstBlankLine> (Children);
        public CstNodeFilter<CstTextLine> TextLine => new CstNodeFilter<CstTextLine> (Children);
    }

    /// <summary>
    /// Nodes = Line
    /// </summary>
    public class CstOrderedListItem : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.OrderedListItem;
        public CstOrderedListItem(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstLine> Line => new CstNodeFilter<CstLine> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstTextLine : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.TextLine;
        public CstTextLine(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = Line
    /// </summary>
    public class CstUnorderedListItem : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.UnorderedListItem;
        public CstUnorderedListItem(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstLine> Line => new CstNodeFilter<CstLine> (Children);
    }

}
