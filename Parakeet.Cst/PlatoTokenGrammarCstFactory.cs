// DO NOT EDIT: Autogenerated file created on 2024-03-19 10:22:24 PM. 
using System;
using System.Linq;
using System.Collections.Generic;
using Ara3D.Parakeet.Grammars;

namespace Ara3D.Parakeet.Cst.PlatoTokenGrammarNameSpace
{
    public class CstNodeFactory : INodeFactory
    {
        public static PlatoTokenGrammar StaticGrammar = PlatoTokenGrammar.Instance;
        public IGrammar Grammar { get; } = StaticGrammar;
        public CstNode Create(ParserTreeNode node)
        {
            switch (node.Type)
            {
                case "BinaryLiteral": return new CstBinaryLiteral(node, node.Contents);
                case "BinaryOperator": return new CstBinaryOperator(node, node.Contents);
                case "BooleanLiteral": return new CstBooleanLiteral(node, node.Contents);
                case "BracedTokenGroup": return new CstBracedTokenGroup(node, node.Children.Select(Create).ToArray());
                case "BracketedTokenGroup": return new CstBracketedTokenGroup(node, node.Children.Select(Create).ToArray());
                case "CharLiteral": return new CstCharLiteral(node, node.Contents);
                case "Comment": return new CstComment(node, node.Contents);
                case "Delimiter": return new CstDelimiter(node, node.Contents);
                case "FieldName": return new CstFieldName(node, node.Children.Select(Create).ToArray());
                case "FloatLiteral": return new CstFloatLiteral(node, node.Contents);
                case "FunctionName": return new CstFunctionName(node, node.Children.Select(Create).ToArray());
                case "HexLiteral": return new CstHexLiteral(node, node.Contents);
                case "Identifier": return new CstIdentifier(node, node.Contents);
                case "IntegerLiteral": return new CstIntegerLiteral(node, node.Contents);
                case "Literal": return new CstLiteral(node, node.Children.Select(Create).ToArray());
                case "NullLiteral": return new CstNullLiteral(node, node.Contents);
                case "Operator": return new CstOperator(node, node.Contents);
                case "ParameterName": return new CstParameterName(node, node.Children.Select(Create).ToArray());
                case "ParenthesizedTokenGroup": return new CstParenthesizedTokenGroup(node, node.Children.Select(Create).ToArray());
                case "Separator": return new CstSeparator(node, node.Children.Select(Create).ToArray());
                case "StatementKeyword": return new CstStatementKeyword(node, node.Contents);
                case "StringLiteral": return new CstStringLiteral(node, node.Contents);
                case "TokenGroup": return new CstTokenGroup(node, node.Children.Select(Create).ToArray());
                case "TypeKeyword": return new CstTypeKeyword(node, node.Contents);
                case "TypeName": return new CstTypeName(node, node.Children.Select(Create).ToArray());
                case "TypeParametersToken": return new CstTypeParametersToken(node, node.Children.Select(Create).ToArray());
                case "TypeParameterToken": return new CstTypeParameterToken(node, node.Children.Select(Create).ToArray());
                case "Unknown": return new CstUnknown(node, node.Contents);
                default: throw new Exception($"Unrecognized parse node {node.Type}");
            }
        }
    }
}
