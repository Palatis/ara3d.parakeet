// DO NOT EDIT: Autogenerated file created on 2024-06-29 2:12:45 AM. 
using System;
using System.Linq;

namespace Ara3D.Parakeet.Cst.CsvGrammarNameSpace
{
    /// <summary>This interface exists to make it easy to auto-generate type switches</summary>
    public interface ICsvCstNode { }

    /// <summary>
    /// Rule = Field ::= ((Text|String)+(Spaces)?)
    /// Nodes = (Text|String)
    /// </summary>
    public class CstField : CstNodeChoice, ICsvCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Field;
        public CstField(ILocation location, params CstNode[] children) : base(location, children) { }
        public CstNodeFilter<CstText> Text => new CstNodeFilter<CstText> (Children);
        public CstNodeFilter<CstString> String => new CstNodeFilter<CstString> (Children);
    }

    /// <summary>
    /// Rule = File ::= ((Row)*+(Spaces)?)
    /// Nodes = (Row)*
    /// </summary>
    public class CstFile : CstNode, ICsvCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.File;
        public CstFile(ILocation location, params CstNode[] children) : base(location, children) { }
        public CstNodeFilter<CstRow> Row => new CstNodeFilter<CstRow> (Children);
    }

    /// <summary>
    /// Rule = Identifier ::= ((IdentifierFirstChar+(IdentifierChar)*)+(Spaces)?)
    /// Nodes = 
    /// </summary>
    public class CstIdentifier : CstNodeLeaf, ICsvCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Identifier;
        public CstIdentifier(ILocation location, string text) : base(location, text) { }
    }

    /// <summary>
    /// Rule = Row ::= (((Field)*+('\r')?+'\n')+(Spaces)?)
    /// Nodes = (Field)*
    /// </summary>
    public class CstRow : CstNode, ICsvCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Row;
        public CstRow(ILocation location, params CstNode[] children) : base(location, children) { }
        public CstNodeFilter<CstField> Field => new CstNodeFilter<CstField> (Children);
    }

    /// <summary>
    /// Rule = String ::= (('"'+(Spaces)?+_UNKNOWN_+(StringChar)*+(Spaces)?+'"'+(Spaces)?)+(Spaces)?)
    /// Nodes = 
    /// </summary>
    public class CstString : CstNodeLeaf, ICsvCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.String;
        public CstString(ILocation location, string text) : base(location, text) { }
    }

    /// <summary>
    /// Rule = Text ::= (((!("\x2C\x0A\x0D\x22")+AnyChar))++(Spaces)?)
    /// Nodes = 
    /// </summary>
    public class CstText : CstNodeLeaf, ICsvCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Text;
        public CstText(ILocation location, string text) : base(location, text) { }
    }

}
