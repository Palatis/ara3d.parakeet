// DO NOT EDIT: Autogenerated file created on 2024-03-02 9:43:36 PM. 
using System;
using System.Linq;

namespace Ara3D.Parakeet.Cst.JoyGrammarNameSpace
{
    /// <summary>
    /// Nodes = (Operator+(Expr)*)
    /// </summary>
    public class CstDef : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.Def;
        public CstDef(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstOperator> Operator => new CstNodeFilter<CstOperator> (Children);
        public CstNodeFilter<CstExpr> Expr => new CstNodeFilter<CstExpr> (Children);
    }

    /// <summary>
    /// Nodes = (Quotation|Literal|Operator|Identifier)
    /// </summary>
    public class CstExpr : CstNodeChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.Expr;
        public CstExpr(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstQuotation> Quotation => new CstNodeFilter<CstQuotation> (Children);
        public CstNodeFilter<CstLiteral> Literal => new CstNodeFilter<CstLiteral> (Children);
        public CstNodeFilter<CstOperator> Operator => new CstNodeFilter<CstOperator> (Children);
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstIdentifier : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.Identifier;
        public CstIdentifier(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstLiteral : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.Literal;
        public CstLiteral(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstOperator : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.Operator;
        public CstOperator(params CstNode[] children) : base(children) { }
        // No children
    }

    /// <summary>
    /// Nodes = (Expr)*
    /// </summary>
    public class CstQuotation : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.Quotation;
        public CstQuotation(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstExpr> Expr => new CstNodeFilter<CstExpr> (Children);
    }

}
