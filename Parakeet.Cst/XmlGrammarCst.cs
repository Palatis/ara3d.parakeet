// DO NOT EDIT: Autogenerated file created on 2024-03-02 9:43:37 PM. 
using System;
using System.Linq;

namespace Ara3D.Parakeet.Cst.XmlGrammarNameSpace
{
    /// <summary>
    /// Nodes = (Name+AttrValue)
    /// </summary>
    public class CstAttr : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.Attr;
        public CstAttr(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstName> Name => new CstNodeFilter<CstName> (Children);
        public CstNodeFilter<CstAttrValue> AttrValue => new CstNodeFilter<CstAttrValue> (Children);
    }

    /// <summary>
    /// Nodes = (Attr)*
    /// </summary>
    public class CstAttrList : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.AttrList;
        public CstAttrList(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstAttr> Attr => new CstNodeFilter<CstAttr> (Children);
    }

    /// <summary>
    /// Nodes = Identifier
    /// </summary>
    public class CstAttrValue : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.AttrValue;
        public CstAttrValue(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstCData : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.CData;
        public CstCData(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = CData
    /// </summary>
    public class CstCDSect : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.CDSect;
        public CstCDSect(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstCData> CData => new CstNodeFilter<CstCData> (Children);
    }

    /// <summary>
    /// Nodes = (Text|CDSect|DTD|Element)
    /// </summary>
    public class CstContent : CstNodeChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.Content;
        public CstContent(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstText> Text => new CstNodeFilter<CstText> (Children);
        public CstNodeFilter<CstCDSect> CDSect => new CstNodeFilter<CstCDSect> (Children);
        public CstNodeFilter<CstDTD> DTD => new CstNodeFilter<CstDTD> (Children);
        public CstNodeFilter<CstElement> Element => new CstNodeFilter<CstElement> (Children);
    }

    /// <summary>
    /// Nodes = ((Prolog)?+Element)
    /// </summary>
    public class CstDocument : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.Document;
        public CstDocument(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstProlog> Prolog => new CstNodeFilter<CstProlog> (Children);
        public CstNodeFilter<CstElement> Element => new CstNodeFilter<CstElement> (Children);
    }

    /// <summary>
    /// Nodes = (DTDInternalSubset)?
    /// </summary>
    public class CstDTD : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.DTD;
        public CstDTD(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstDTDInternalSubset> DTDInternalSubset => new CstNodeFilter<CstDTDInternalSubset> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstDTDInternalSubset : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.DTDInternalSubset;
        public CstDTDInternalSubset(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = (EmptyElementTag|(StartTag+Content+EndTag))
    /// </summary>
    public class CstElement : CstNodeChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.Element;
        public CstElement(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstEmptyElementTag> EmptyElementTag => new CstNodeFilter<CstEmptyElementTag> (Children);
        public CstNodeFilter<CstStartTag> StartTag => new CstNodeFilter<CstStartTag> (Children);
        public CstNodeFilter<CstContent> Content => new CstNodeFilter<CstContent> (Children);
        public CstNodeFilter<CstEndTag> EndTag => new CstNodeFilter<CstEndTag> (Children);
    }

    /// <summary>
    /// Nodes = (Identifier+AttrList)
    /// </summary>
    public class CstEmptyElementTag : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.EmptyElementTag;
        public CstEmptyElementTag(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
        public CstNodeFilter<CstAttrList> AttrList => new CstNodeFilter<CstAttrList> (Children);
    }

    /// <summary>
    /// Nodes = Identifier
    /// </summary>
    public class CstEndTag : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.EndTag;
        public CstEndTag(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
    }

    /// <summary>
    /// Nodes = (Identifier|HexEntityValue|NumericEntityValue)
    /// </summary>
    public class CstEntity : CstNodeChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.Entity;
        public CstEntity(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
        public CstNodeFilter<CstHexEntityValue> HexEntityValue => new CstNodeFilter<CstHexEntityValue> (Children);
        public CstNodeFilter<CstNumericEntityValue> NumericEntityValue => new CstNodeFilter<CstNumericEntityValue> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstHexEntityValue : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.HexEntityValue;
        public CstHexEntityValue(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstIdentifier : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.Identifier;
        public CstIdentifier(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = PI
    /// </summary>
    public class CstMisc : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.Misc;
        public CstMisc(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstPI> PI => new CstNodeFilter<CstPI> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstName : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.Name;
        public CstName(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = (StartTag+Content+EndTag)
    /// </summary>
    public class CstNonEmptyElement : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.NonEmptyElement;
        public CstNonEmptyElement(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstStartTag> StartTag => new CstNodeFilter<CstStartTag> (Children);
        public CstNodeFilter<CstContent> Content => new CstNodeFilter<CstContent> (Children);
        public CstNodeFilter<CstEndTag> EndTag => new CstNodeFilter<CstEndTag> (Children);
    }

    /// <summary>
    /// Nodes = (Identifier+(Identifier)?)
    /// </summary>
    public class CstNSIdent : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.NSIdent;
        public CstNSIdent(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstNumericEntityValue : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.NumericEntityValue;
        public CstNumericEntityValue(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstPI : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.PI;
        public CstPI(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = ((XmlDecl)?+(Misc)*+(DTD)?+(Misc)*)
    /// </summary>
    public class CstProlog : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.Prolog;
        public CstProlog(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstXmlDecl> XmlDecl => new CstNodeFilter<CstXmlDecl> (Children);
        public CstNodeFilter<CstMisc> Misc => new CstNodeFilter<CstMisc> (Children);
        public CstNodeFilter<CstDTD> DTD => new CstNodeFilter<CstDTD> (Children);
    }

    /// <summary>
    /// Nodes = (Identifier+AttrList)
    /// </summary>
    public class CstStartTag : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.StartTag;
        public CstStartTag(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
        public CstNodeFilter<CstAttrList> AttrList => new CstNodeFilter<CstAttrList> (Children);
    }

    /// <summary>
    /// Nodes = (EndTag|EmptyElementTag|StartTag)
    /// </summary>
    public class CstTag : CstNodeChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.Tag;
        public CstTag(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstEndTag> EndTag => new CstNodeFilter<CstEndTag> (Children);
        public CstNodeFilter<CstEmptyElementTag> EmptyElementTag => new CstNodeFilter<CstEmptyElementTag> (Children);
        public CstNodeFilter<CstStartTag> StartTag => new CstNodeFilter<CstStartTag> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstText : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.Text;
        public CstText(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = AttrList
    /// </summary>
    public class CstXmlDecl : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.XmlDecl;
        public CstXmlDecl(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstAttrList> AttrList => new CstNodeFilter<CstAttrList> (Children);
    }

}
