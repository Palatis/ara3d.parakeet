// DO NOT EDIT: Autogenerated file created on 2024-06-29 2:12:48 AM. 
using System;
using System.Linq;
using System.Collections.Generic;
using Ara3D.Parakeet.Grammars;

namespace Ara3D.Parakeet.Cst.StepGrammarNameSpace
{
    public class CstNodeFactory : INodeFactory
    {
        public static StepGrammar StaticGrammar = StepGrammar.Instance;
        public IGrammar Grammar { get; } = StaticGrammar;
        public CstNode Create(ParserTreeNode node)
        {
            switch (node.Type)
            {
                case "Aggregate": return new CstAggregate(node, node.Children.Select(Create).ToArray());
                case "AttributeValues": return new CstAttributeValues(node, node.Children.Select(Create).ToArray());
                case "BeginHeader": return new CstBeginHeader(node, node.Contents);
                case "ComplexEntityData": return new CstComplexEntityData(node, node.Children.Select(Create).ToArray());
                case "DataBegin": return new CstDataBegin(node, node.Contents);
                case "DataEntry": return new CstDataEntry(node, node.Children.Select(Create).ToArray());
                case "DataSection": return new CstDataSection(node, node.Children.Select(Create).ToArray());
                case "EndSection": return new CstEndSection(node, node.Contents);
                case "EntityData": return new CstEntityData(node, node.Children.Select(Create).ToArray());
                case "EntityDataName": return new CstEntityDataName(node, node.Children.Select(Create).ToArray());
                case "File": return new CstFile(node, node.Children.Select(Create).ToArray());
                case "Header": return new CstHeader(node, node.Children.Select(Create).ToArray());
                case "Identifier": return new CstIdentifier(node, node.Contents);
                case "InstanceName": return new CstInstanceName(node, node.Contents);
                case "Magic": return new CstMagic(node, node.Contents);
                case "Number": return new CstNumber(node, node.Contents);
                case "RedeclaredAttribute": return new CstRedeclaredAttribute(node, node.Contents);
                case "SimpleEntityData": return new CstSimpleEntityData(node, node.Children.Select(Create).ToArray());
                case "String": return new CstString(node, node.Contents);
                case "Symbol": return new CstSymbol(node, node.Children.Select(Create).ToArray());
                case "UnsetAttributeValue": return new CstUnsetAttributeValue(node, node.Contents);
                case "Value": return new CstValue(node, node.Children.Select(Create).ToArray());
                default: throw new Exception($"Unrecognized parse node {node.Type}");
            }
        }
    }
}
