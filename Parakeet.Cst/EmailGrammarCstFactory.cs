// DO NOT EDIT: Autogenerated file created on 2024-06-03 7:58:22 PM. 
using System;
using System.Linq;
using System.Collections.Generic;
using Ara3D.Parakeet.Grammars;

namespace Ara3D.Parakeet.Cst.EmailGrammarNameSpace
{
    public class CstNodeFactory : INodeFactory
    {
        public static EmailGrammar StaticGrammar = EmailGrammar.Instance;
        public IGrammar Grammar { get; } = StaticGrammar;
        public CstNode Create(ParserTreeNode node)
        {
            switch (node.Type)
            {
                case "Address": return new CstAddress(node, node.Children.Select(Create).ToArray());
                case "AddressList": return new CstAddressList(node, node.Children.Select(Create).ToArray());
                case "AddrSpec": return new CstAddrSpec(node, node.Children.Select(Create).ToArray());
                case "AngleAddr": return new CstAngleAddr(node, node.Children.Select(Create).ToArray());
                case "Atom": return new CstAtom(node, node.Children.Select(Create).ToArray());
                case "CContent": return new CstCContent(node, node.Children.Select(Create).ToArray());
                case "CFWS": return new CstCFWS(node, node.Children.Select(Create).ToArray());
                case "Comment": return new CstComment(node, node.Children.Select(Create).ToArray());
                case "CText": return new CstCText(node, node.Contents);
                case "DisplayName": return new CstDisplayName(node, node.Children.Select(Create).ToArray());
                case "Domain": return new CstDomain(node, node.Children.Select(Create).ToArray());
                case "DomainLiteral": return new CstDomainLiteral(node, node.Children.Select(Create).ToArray());
                case "DotAtom": return new CstDotAtom(node, node.Children.Select(Create).ToArray());
                case "DotAtomText": return new CstDotAtomText(node, node.Contents);
                case "DText": return new CstDText(node, node.Contents);
                case "Group": return new CstGroup(node, node.Children.Select(Create).ToArray());
                case "GroupList": return new CstGroupList(node, node.Children.Select(Create).ToArray());
                case "Identifier": return new CstIdentifier(node, node.Contents);
                case "LocalPart": return new CstLocalPart(node, node.Children.Select(Create).ToArray());
                case "Mailbox": return new CstMailbox(node, node.Children.Select(Create).ToArray());
                case "MailboxList": return new CstMailboxList(node, node.Children.Select(Create).ToArray());
                case "NameAddr": return new CstNameAddr(node, node.Children.Select(Create).ToArray());
                case "Phrase": return new CstPhrase(node, node.Children.Select(Create).ToArray());
                case "QContent": return new CstQContent(node, node.Children.Select(Create).ToArray());
                case "QuotedPair": return new CstQuotedPair(node, node.Contents);
                case "QuotedString": return new CstQuotedString(node, node.Children.Select(Create).ToArray());
                case "Unstructured": return new CstUnstructured(node, node.Contents);
                case "Word": return new CstWord(node, node.Children.Select(Create).ToArray());
                default: throw new Exception($"Unrecognized parse node {node.Type}");
            }
        }
    }
}
