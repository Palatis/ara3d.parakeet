// DO NOT EDIT: Autogenerated file created on 2024-03-03 10:34:02 PM. 
using System;
using System.Linq;

namespace Ara3D.Parakeet.Cst.MustacheGrammarNameSpace
{
    /// <summary>
    /// Rule = Block ::= ((InvertedSection|Section|Comment|Partial|Variable|UnescapedVariable|PlainText)+(Spaces)?)
    /// Nodes = (InvertedSection|Section|Comment|Partial|Variable|UnescapedVariable|PlainText)
    /// </summary>
    public class CstBlock : CstNodeChoice
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Block;
        public CstBlock(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstInvertedSection> InvertedSection => new CstNodeFilter<CstInvertedSection> (Children);
        public CstNodeFilter<CstSection> Section => new CstNodeFilter<CstSection> (Children);
        public CstNodeFilter<CstComment> Comment => new CstNodeFilter<CstComment> (Children);
        public CstNodeFilter<CstPartial> Partial => new CstNodeFilter<CstPartial> (Children);
        public CstNodeFilter<CstVariable> Variable => new CstNodeFilter<CstVariable> (Children);
        public CstNodeFilter<CstUnescapedVariable> UnescapedVariable => new CstNodeFilter<CstUnescapedVariable> (Children);
        public CstNodeFilter<CstPlainText> PlainText => new CstNodeFilter<CstPlainText> (Children);
    }

    /// <summary>
    /// Rule = Comment ::= ((Start+'!'+_RECOVER_+(Space)*+Key+End)+(Spaces)?)
    /// Nodes = Key
    /// </summary>
    public class CstComment : CstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Comment;
        public CstComment(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstKey> Key => new CstNodeFilter<CstKey> (Children);
    }

    /// <summary>
    /// Rule = Content ::= ((Block)*+(Spaces)?)
    /// Nodes = (Block)*
    /// </summary>
    public class CstContent : CstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Content;
        public CstContent(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstBlock> Block => new CstNodeFilter<CstBlock> (Children);
    }

    /// <summary>
    /// Rule = Document ::= (Content+(Spaces)?)
    /// Nodes = Content
    /// </summary>
    public class CstDocument : CstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Document;
        public CstDocument(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstContent> Content => new CstNodeFilter<CstContent> (Children);
    }

    /// <summary>
    /// Rule = EndSection ::= ((Start+'/'+_RECOVER_+(Space)*+Key+End)+(Spaces)?)
    /// Nodes = Key
    /// </summary>
    public class CstEndSection : CstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.EndSection;
        public CstEndSection(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstKey> Key => new CstNodeFilter<CstKey> (Children);
    }

    /// <summary>
    /// Rule = Identifier ::= ((IdentifierFirstChar+(IdentifierChar)*)+(Spaces)?)
    /// Nodes = 
    /// </summary>
    public class CstIdentifier : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Identifier;
        public CstIdentifier(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = InvertedSection ::= ((StartInvertedSection+_RECOVER_+Content+EndSection)+(Spaces)?)
    /// Nodes = (StartInvertedSection+Content+EndSection)
    /// </summary>
    public class CstInvertedSection : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.InvertedSection;
        public CstInvertedSection(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstStartInvertedSection> StartInvertedSection => new CstNodeFilter<CstStartInvertedSection> (Children);
        public CstNodeFilter<CstContent> Content => new CstNodeFilter<CstContent> (Children);
        public CstNodeFilter<CstEndSection> EndSection => new CstNodeFilter<CstEndSection> (Children);
    }

    /// <summary>
    /// Rule = Key ::= (((!(End)+AnyChar))*+(Spaces)?)
    /// Nodes = 
    /// </summary>
    public class CstKey : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Key;
        public CstKey(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = Partial ::= ((Start+'>'+_RECOVER_+(Space)*+Key+End)+(Spaces)?)
    /// Nodes = Key
    /// </summary>
    public class CstPartial : CstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Partial;
        public CstPartial(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstKey> Key => new CstNodeFilter<CstKey> (Children);
    }

    /// <summary>
    /// Rule = PlainText ::= (((!((Start|EndOfInput))+AnyChar))*+(Spaces)?)
    /// Nodes = 
    /// </summary>
    public class CstPlainText : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.PlainText;
        public CstPlainText(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = RestOfLine ::= ((((SpaceOrTab)*+NewLine)|EndOfInput)+(Spaces)?)
    /// Nodes = 
    /// </summary>
    public class CstRestOfLine : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.RestOfLine;
        public CstRestOfLine(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Rule = Section ::= ((StartSection+_RECOVER_+Content+EndSection)+(Spaces)?)
    /// Nodes = (StartSection+Content+EndSection)
    /// </summary>
    public class CstSection : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Section;
        public CstSection(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstStartSection> StartSection => new CstNodeFilter<CstStartSection> (Children);
        public CstNodeFilter<CstContent> Content => new CstNodeFilter<CstContent> (Children);
        public CstNodeFilter<CstEndSection> EndSection => new CstNodeFilter<CstEndSection> (Children);
    }

    /// <summary>
    /// Rule = StartInvertedSection ::= ((Start+'^'+_RECOVER_+(Space)*+Key+End+RestOfLine)+(Spaces)?)
    /// Nodes = (Key+RestOfLine)
    /// </summary>
    public class CstStartInvertedSection : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.StartInvertedSection;
        public CstStartInvertedSection(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstKey> Key => new CstNodeFilter<CstKey> (Children);
        public CstNodeFilter<CstRestOfLine> RestOfLine => new CstNodeFilter<CstRestOfLine> (Children);
    }

    /// <summary>
    /// Rule = StartSection ::= ((Start+'#'+_RECOVER_+(Space)*+Key+End+RestOfLine)+(Spaces)?)
    /// Nodes = (Key+RestOfLine)
    /// </summary>
    public class CstStartSection : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.StartSection;
        public CstStartSection(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstKey> Key => new CstNodeFilter<CstKey> (Children);
        public CstNodeFilter<CstRestOfLine> RestOfLine => new CstNodeFilter<CstRestOfLine> (Children);
    }

    /// <summary>
    /// Rule = UnescapedVariable ::= (((Start+'{'+_RECOVER_+(Space)*+Key+End+('}')?)|(Start+'&'+_RECOVER_+(Space)*+Key+End))+(Spaces)?)
    /// Nodes = (Key|Key)
    /// </summary>
    public class CstUnescapedVariable : CstNodeChoice
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.UnescapedVariable;
        public CstUnescapedVariable(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstKey> Key => new CstNodeFilter<CstKey> (Children);
    }

    /// <summary>
    /// Rule = Variable ::= ((Start+!([\x21\x23\x26\x2F<^\x7B])+_RECOVER_+(Space)*+Key+End)+(Spaces)?)
    /// Nodes = Key
    /// </summary>
    public class CstVariable : CstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Variable;
        public CstVariable(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstKey> Key => new CstNodeFilter<CstKey> (Children);
    }

}
