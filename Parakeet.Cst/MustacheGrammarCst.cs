// DO NOT EDIT: Autogenerated file created on 2024-03-02 9:43:36 PM. 
using System;
using System.Linq;

namespace Ara3D.Parakeet.Cst.MustacheGrammarNameSpace
{
    /// <summary>
    /// Nodes = (InvertedSection|Section|Comment|Partial|Variable|UnescapedVariable|PlainText)
    /// </summary>
    public class CstBlock : CstNodeChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.Block;
        public CstBlock(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstInvertedSection> InvertedSection => new CstNodeFilter<CstInvertedSection> (Children);
        public CstNodeFilter<CstSection> Section => new CstNodeFilter<CstSection> (Children);
        public CstNodeFilter<CstComment> Comment => new CstNodeFilter<CstComment> (Children);
        public CstNodeFilter<CstPartial> Partial => new CstNodeFilter<CstPartial> (Children);
        public CstNodeFilter<CstVariable> Variable => new CstNodeFilter<CstVariable> (Children);
        public CstNodeFilter<CstUnescapedVariable> UnescapedVariable => new CstNodeFilter<CstUnescapedVariable> (Children);
        public CstNodeFilter<CstPlainText> PlainText => new CstNodeFilter<CstPlainText> (Children);
    }

    /// <summary>
    /// Nodes = Key
    /// </summary>
    public class CstComment : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.Comment;
        public CstComment(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstKey> Key => new CstNodeFilter<CstKey> (Children);
    }

    /// <summary>
    /// Nodes = (Block)*
    /// </summary>
    public class CstContent : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.Content;
        public CstContent(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstBlock> Block => new CstNodeFilter<CstBlock> (Children);
    }

    /// <summary>
    /// Nodes = Content
    /// </summary>
    public class CstDocument : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.Document;
        public CstDocument(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstContent> Content => new CstNodeFilter<CstContent> (Children);
    }

    /// <summary>
    /// Nodes = Key
    /// </summary>
    public class CstEndSection : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.EndSection;
        public CstEndSection(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstKey> Key => new CstNodeFilter<CstKey> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstIdentifier : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.Identifier;
        public CstIdentifier(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = (StartInvertedSection+Content+EndSection)
    /// </summary>
    public class CstInvertedSection : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.InvertedSection;
        public CstInvertedSection(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstStartInvertedSection> StartInvertedSection => new CstNodeFilter<CstStartInvertedSection> (Children);
        public CstNodeFilter<CstContent> Content => new CstNodeFilter<CstContent> (Children);
        public CstNodeFilter<CstEndSection> EndSection => new CstNodeFilter<CstEndSection> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstKey : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.Key;
        public CstKey(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = Key
    /// </summary>
    public class CstPartial : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.Partial;
        public CstPartial(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstKey> Key => new CstNodeFilter<CstKey> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstPlainText : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.PlainText;
        public CstPlainText(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstRestOfLine : CstNodeLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.RestOfLine;
        public CstRestOfLine(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = (StartSection+Content+EndSection)
    /// </summary>
    public class CstSection : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.Section;
        public CstSection(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstStartSection> StartSection => new CstNodeFilter<CstStartSection> (Children);
        public CstNodeFilter<CstContent> Content => new CstNodeFilter<CstContent> (Children);
        public CstNodeFilter<CstEndSection> EndSection => new CstNodeFilter<CstEndSection> (Children);
    }

    /// <summary>
    /// Nodes = (Key+RestOfLine)
    /// </summary>
    public class CstStartInvertedSection : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.StartInvertedSection;
        public CstStartInvertedSection(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstKey> Key => new CstNodeFilter<CstKey> (Children);
        public CstNodeFilter<CstRestOfLine> RestOfLine => new CstNodeFilter<CstRestOfLine> (Children);
    }

    /// <summary>
    /// Nodes = (Key+RestOfLine)
    /// </summary>
    public class CstStartSection : CstNodeSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.StartSection;
        public CstStartSection(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstKey> Key => new CstNodeFilter<CstKey> (Children);
        public CstNodeFilter<CstRestOfLine> RestOfLine => new CstNodeFilter<CstRestOfLine> (Children);
    }

    /// <summary>
    /// Nodes = (Key|Key)
    /// </summary>
    public class CstUnescapedVariable : CstNodeChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.UnescapedVariable;
        public CstUnescapedVariable(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstKey> Key => new CstNodeFilter<CstKey> (Children);
    }

    /// <summary>
    /// Nodes = Key
    /// </summary>
    public class CstVariable : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.Variable;
        public CstVariable(params CstNode[] children) : base(children) { }
        public CstNodeFilter<CstKey> Key => new CstNodeFilter<CstKey> (Children);
    }

}
