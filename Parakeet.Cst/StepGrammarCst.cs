// DO NOT EDIT: Autogenerated file created on 2024-06-29 2:12:48 AM. 
using System;
using System.Linq;

namespace Ara3D.Parakeet.Cst.StepGrammarNameSpace
{
    /// <summary>This interface exists to make it easy to auto-generate type switches</summary>
    public interface IStepCstNode { }

    /// <summary>
    /// Rule = Aggregate ::= (('('+WS+_RECOVER_+(((Value+WS+((Comma+Value+WS))*)+(Comma)?))?+WS+')'+WS)+WS)
    /// Nodes = (Value)*
    /// </summary>
    public class CstAggregate : CstNode, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Aggregate;
        public CstAggregate(ILocation location, params CstNode[] children) : base(location, children) { }
        public CstNodeFilter<CstValue> Value => new CstNodeFilter<CstValue> (Children);
    }

    /// <summary>
    /// Rule = AttributeValues ::= (('('+WS+_RECOVER_+(((Value+WS+((Comma+Value+WS))*)+(Comma)?))?+WS+')'+WS)+WS)
    /// Nodes = (Value)*
    /// </summary>
    public class CstAttributeValues : CstNode, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.AttributeValues;
        public CstAttributeValues(ILocation location, params CstNode[] children) : base(location, children) { }
        public CstNodeFilter<CstValue> Value => new CstNodeFilter<CstValue> (Children);
    }

    /// <summary>
    /// Rule = BeginHeader ::= ("HEADER\x3B"+WS)
    /// Nodes = 
    /// </summary>
    public class CstBeginHeader : CstNodeLeaf, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.BeginHeader;
        public CstBeginHeader(ILocation location, string text) : base(location, text) { }
    }

    /// <summary>
    /// Rule = ComplexEntityData ::= (('('+WS+_UNKNOWN_+(SimpleEntityData)++WS+')'+WS)+WS)
    /// Nodes = (SimpleEntityData)+
    /// </summary>
    public class CstComplexEntityData : CstNode, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.ComplexEntityData;
        public CstComplexEntityData(ILocation location, params CstNode[] children) : base(location, children) { }
        public CstNodeFilter<CstSimpleEntityData> SimpleEntityData => new CstNodeFilter<CstSimpleEntityData> (Children);
    }

    /// <summary>
    /// Rule = DataBegin ::= ("DATA\x3B"+WS)
    /// Nodes = 
    /// </summary>
    public class CstDataBegin : CstNodeLeaf, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.DataBegin;
        public CstDataBegin(ILocation location, string text) : base(location, text) { }
    }

    /// <summary>
    /// Rule = DataEntry ::= ((InstanceName+_RECOVER_+'='+WS+EntityData+';')+WS)
    /// Nodes = (InstanceName+EntityData)
    /// </summary>
    public class CstDataEntry : CstNodeSequence, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.DataEntry;
        public CstDataEntry(ILocation location, params CstNode[] children) : base(location, children) { }
        public CstNodeFilter<CstInstanceName> InstanceName => new CstNodeFilter<CstInstanceName> (Children);
        public CstNodeFilter<CstEntityData> EntityData => new CstNodeFilter<CstEntityData> (Children);
    }

    /// <summary>
    /// Rule = DataSection ::= ((DataBegin+_RECOVER_+(DataEntry)*+EndSection)+WS)
    /// Nodes = (DataBegin+(DataEntry)*+EndSection)
    /// </summary>
    public class CstDataSection : CstNodeSequence, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.DataSection;
        public CstDataSection(ILocation location, params CstNode[] children) : base(location, children) { }
        public CstNodeFilter<CstDataBegin> DataBegin => new CstNodeFilter<CstDataBegin> (Children);
        public CstNodeFilter<CstDataEntry> DataEntry => new CstNodeFilter<CstDataEntry> (Children);
        public CstNodeFilter<CstEndSection> EndSection => new CstNodeFilter<CstEndSection> (Children);
    }

    /// <summary>
    /// Rule = EndSection ::= ("ENDSEC\x3B"+WS)
    /// Nodes = 
    /// </summary>
    public class CstEndSection : CstNodeLeaf, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.EndSection;
        public CstEndSection(ILocation location, string text) : base(location, text) { }
    }

    /// <summary>
    /// Rule = EntityData ::= ((ComplexEntityData|SimpleEntityData)+WS)
    /// Nodes = (ComplexEntityData|SimpleEntityData)
    /// </summary>
    public class CstEntityData : CstNodeChoice, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.EntityData;
        public CstEntityData(ILocation location, params CstNode[] children) : base(location, children) { }
        public CstNodeFilter<CstComplexEntityData> ComplexEntityData => new CstNodeFilter<CstComplexEntityData> (Children);
        public CstNodeFilter<CstSimpleEntityData> SimpleEntityData => new CstNodeFilter<CstSimpleEntityData> (Children);
    }

    /// <summary>
    /// Rule = EntityDataName ::= (Identifier+WS)
    /// Nodes = Identifier
    /// </summary>
    public class CstEntityDataName : CstNode, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.EntityDataName;
        public CstEntityDataName(ILocation location, params CstNode[] children) : base(location, children) { }
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
    }

    /// <summary>
    /// Rule = File ::= ((Magic+_RECOVER_+Header+DataSection)+WS)
    /// Nodes = (Magic+Header+DataSection)
    /// </summary>
    public class CstFile : CstNodeSequence, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.File;
        public CstFile(ILocation location, params CstNode[] children) : base(location, children) { }
        public CstNodeFilter<CstMagic> Magic => new CstNodeFilter<CstMagic> (Children);
        public CstNodeFilter<CstHeader> Header => new CstNodeFilter<CstHeader> (Children);
        public CstNodeFilter<CstDataSection> DataSection => new CstNodeFilter<CstDataSection> (Children);
    }

    /// <summary>
    /// Rule = Header ::= ((BeginHeader+((!(EndSection)+AnyChar))*+EndSection)+WS)
    /// Nodes = (BeginHeader+EndSection)
    /// </summary>
    public class CstHeader : CstNodeSequence, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Header;
        public CstHeader(ILocation location, params CstNode[] children) : base(location, children) { }
        public CstNodeFilter<CstBeginHeader> BeginHeader => new CstNodeFilter<CstBeginHeader> (Children);
        public CstNodeFilter<CstEndSection> EndSection => new CstNodeFilter<CstEndSection> (Children);
    }

    /// <summary>
    /// Rule = Identifier ::= ((IdentifierFirstChar+(IdentifierChar)*)+WS)
    /// Nodes = 
    /// </summary>
    public class CstIdentifier : CstNodeLeaf, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Identifier;
        public CstIdentifier(ILocation location, string text) : base(location, text) { }
    }

    /// <summary>
    /// Rule = InstanceName ::= (('#'+_RECOVER_+Integer)+WS)
    /// Nodes = 
    /// </summary>
    public class CstInstanceName : CstNodeLeaf, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.InstanceName;
        public CstInstanceName(ILocation location, string text) : base(location, text) { }
    }

    /// <summary>
    /// Rule = Magic ::= ("ISO\x2D10303\x2D21\x3B"+WS)
    /// Nodes = 
    /// </summary>
    public class CstMagic : CstNodeLeaf, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Magic;
        public CstMagic(ILocation location, string text) : base(location, text) { }
    }

    /// <summary>
    /// Rule = Number ::= ((Integer+(DecimalPart)?+(ExponentPart)?)+WS)
    /// Nodes = 
    /// </summary>
    public class CstNumber : CstNodeLeaf, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Number;
        public CstNumber(ILocation location, string text) : base(location, text) { }
    }

    /// <summary>
    /// Rule = RedeclaredAttribute ::= ('*'+WS)
    /// Nodes = 
    /// </summary>
    public class CstRedeclaredAttribute : CstNodeLeaf, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.RedeclaredAttribute;
        public CstRedeclaredAttribute(ILocation location, string text) : base(location, text) { }
    }

    /// <summary>
    /// Rule = SimpleEntityData ::= ((EntityDataName+_RECOVER_+AttributeValues)+WS)
    /// Nodes = (EntityDataName+AttributeValues)
    /// </summary>
    public class CstSimpleEntityData : CstNodeSequence, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.SimpleEntityData;
        public CstSimpleEntityData(ILocation location, params CstNode[] children) : base(location, children) { }
        public CstNodeFilter<CstEntityDataName> EntityDataName => new CstNodeFilter<CstEntityDataName> (Children);
        public CstNodeFilter<CstAttributeValues> AttributeValues => new CstNodeFilter<CstAttributeValues> (Children);
    }

    /// <summary>
    /// Rule = String ::= (('''+WS+_UNKNOWN_+(StringChar)*+WS+'''+WS)+WS)
    /// Nodes = 
    /// </summary>
    public class CstString : CstNodeLeaf, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.String;
        public CstString(ILocation location, string text) : base(location, text) { }
    }

    /// <summary>
    /// Rule = Symbol ::= (('.'+_RECOVER_+Identifier+'.')+WS)
    /// Nodes = Identifier
    /// </summary>
    public class CstSymbol : CstNode, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Symbol;
        public CstSymbol(ILocation location, params CstNode[] children) : base(location, children) { }
        public CstNodeFilter<CstIdentifier> Identifier => new CstNodeFilter<CstIdentifier> (Children);
    }

    /// <summary>
    /// Rule = UnsetAttributeValue ::= ('$'+WS)
    /// Nodes = 
    /// </summary>
    public class CstUnsetAttributeValue : CstNodeLeaf, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.UnsetAttributeValue;
        public CstUnsetAttributeValue(ILocation location, string text) : base(location, text) { }
    }

    /// <summary>
    /// Rule = Value ::= ((InstanceName|Symbol|Aggregate|String|Number|UnsetAttributeValue|RedeclaredAttribute|SimpleEntityData)+WS)
    /// Nodes = (InstanceName|Symbol|Aggregate|String|Number|UnsetAttributeValue|RedeclaredAttribute|SimpleEntityData)
    /// </summary>
    public class CstValue : CstNodeChoice, IStepCstNode
    {
        public static Rule Rule = CstNodeFactory.StaticGrammar.Value;
        public CstValue(ILocation location, params CstNode[] children) : base(location, children) { }
        public CstNodeFilter<CstInstanceName> InstanceName => new CstNodeFilter<CstInstanceName> (Children);
        public CstNodeFilter<CstSymbol> Symbol => new CstNodeFilter<CstSymbol> (Children);
        public CstNodeFilter<CstAggregate> Aggregate => new CstNodeFilter<CstAggregate> (Children);
        public CstNodeFilter<CstString> String => new CstNodeFilter<CstString> (Children);
        public CstNodeFilter<CstNumber> Number => new CstNodeFilter<CstNumber> (Children);
        public CstNodeFilter<CstUnsetAttributeValue> UnsetAttributeValue => new CstNodeFilter<CstUnsetAttributeValue> (Children);
        public CstNodeFilter<CstRedeclaredAttribute> RedeclaredAttribute => new CstNodeFilter<CstRedeclaredAttribute> (Children);
        public CstNodeFilter<CstSimpleEntityData> SimpleEntityData => new CstNodeFilter<CstSimpleEntityData> (Children);
    }

}
