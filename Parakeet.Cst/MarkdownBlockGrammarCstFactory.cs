// DO NOT EDIT: Autogenerated file created on 2024-03-19 10:22:21 PM. 
using System;
using System.Linq;
using System.Collections.Generic;
using Ara3D.Parakeet.Grammars;

namespace Ara3D.Parakeet.Cst.MarkdownBlockGrammarNameSpace
{
    public class CstNodeFactory : INodeFactory
    {
        public static MarkdownBlockGrammar StaticGrammar = MarkdownBlockGrammar.Instance;
        public IGrammar Grammar { get; } = StaticGrammar;
        public CstNode Create(ParserTreeNode node)
        {
            switch (node.Type)
            {
                case "BlankLine": return new CstBlankLine(node, node.Contents);
                case "Block": return new CstBlock(node, node.Children.Select(Create).ToArray());
                case "BlockQuotedLine": return new CstBlockQuotedLine(node, node.Children.Select(Create).ToArray());
                case "CodeBlock": return new CstCodeBlock(node, node.Children.Select(Create).ToArray());
                case "CodeBlockLang": return new CstCodeBlockLang(node, node.Children.Select(Create).ToArray());
                case "CodeBlockText": return new CstCodeBlockText(node, node.Contents);
                case "Comment": return new CstComment(node, node.Children.Select(Create).ToArray());
                case "Document": return new CstDocument(node, node.Children.Select(Create).ToArray());
                case "H1Underline": return new CstH1Underline(node, node.Children.Select(Create).ToArray());
                case "H2Underline": return new CstH2Underline(node, node.Children.Select(Create).ToArray());
                case "Heading": return new CstHeading(node, node.Children.Select(Create).ToArray());
                case "HeadingOperator": return new CstHeadingOperator(node, node.Contents);
                case "HeadingUnderlined": return new CstHeadingUnderlined(node, node.Children.Select(Create).ToArray());
                case "HeadingWithOperator": return new CstHeadingWithOperator(node, node.Children.Select(Create).ToArray());
                case "HorizontalLine": return new CstHorizontalLine(node, node.Children.Select(Create).ToArray());
                case "Identifier": return new CstIdentifier(node, node.Contents);
                case "Indent": return new CstIndent(node, node.Contents);
                case "Indents": return new CstIndents(node, node.Children.Select(Create).ToArray());
                case "IndentsOrQuoteMarkers": return new CstIndentsOrQuoteMarkers(node, node.Children.Select(Create).ToArray());
                case "Line": return new CstLine(node, node.Children.Select(Create).ToArray());
                case "NonEmptyTextLine": return new CstNonEmptyTextLine(node, node.Contents);
                case "OrderedListItem": return new CstOrderedListItem(node, node.Children.Select(Create).ToArray());
                case "QuoteMarker": return new CstQuoteMarker(node, node.Contents);
                case "RestOfLine": return new CstRestOfLine(node, node.Children.Select(Create).ToArray());
                case "TextLine": return new CstTextLine(node, node.Contents);
                case "UnorderedListItem": return new CstUnorderedListItem(node, node.Children.Select(Create).ToArray());
                default: throw new Exception($"Unrecognized parse node {node.Type}");
            }
        }
    }
}
