// DO NOT EDIT: Autogenerated file created on 2024-03-19 10:22:21 PM. 
using System;
using System.Linq;
using System.Collections.Generic;
using Ara3D.Parakeet.Grammars;

namespace Ara3D.Parakeet.Cst.MarkdownInlineGrammarNameSpace
{
    public class CstNodeFactory : INodeFactory
    {
        public static MarkdownInlineGrammar StaticGrammar = MarkdownInlineGrammar.Instance;
        public IGrammar Grammar { get; } = StaticGrammar;
        public CstNode Create(ParserTreeNode node)
        {
            switch (node.Type)
            {
                case "AltText": return new CstAltText(node, node.Contents);
                case "Bold": return new CstBold(node, node.Children.Select(Create).ToArray());
                case "BoldAndItalic": return new CstBoldAndItalic(node, node.Children.Select(Create).ToArray());
                case "Code": return new CstCode(node, node.Children.Select(Create).ToArray());
                case "Content": return new CstContent(node, node.Children.Select(Create).ToArray());
                case "Email": return new CstEmail(node, node.Contents);
                case "EmailLink": return new CstEmailLink(node, node.Children.Select(Create).ToArray());
                case "EscapedChar": return new CstEscapedChar(node, node.Contents);
                case "HtmlTag": return new CstHtmlTag(node, node.Contents);
                case "Identifier": return new CstIdentifier(node, node.Contents);
                case "Img": return new CstImg(node, node.Children.Select(Create).ToArray());
                case "InnerText": return new CstInnerText(node, node.Children.Select(Create).ToArray());
                case "Italic": return new CstItalic(node, node.Children.Select(Create).ToArray());
                case "Link": return new CstLink(node, node.Children.Select(Create).ToArray());
                case "LinkedText": return new CstLinkedText(node, node.Children.Select(Create).ToArray());
                case "PlainText": return new CstPlainText(node, node.Contents);
                case "PlainTextUrl": return new CstPlainTextUrl(node, node.Contents);
                case "Strikethrough": return new CstStrikethrough(node, node.Children.Select(Create).ToArray());
                case "Url": return new CstUrl(node, node.Contents);
                case "UrlLink": return new CstUrlLink(node, node.Children.Select(Create).ToArray());
                case "UrlTitle": return new CstUrlTitle(node, node.Contents);
                default: throw new Exception($"Unrecognized parse node {node.Type}");
            }
        }
    }
}
