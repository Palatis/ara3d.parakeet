// DO NOT EDIT: Autogenerated file created on 2024-06-03 7:58:25 PM. 
using System;
using System.Linq;
using System.Collections.Generic;
using Ara3D.Parakeet.Grammars;

namespace Ara3D.Parakeet.Cst.XmlGrammarNameSpace
{
    public class CstNodeFactory : INodeFactory
    {
        public static XmlGrammar StaticGrammar = XmlGrammar.Instance;
        public IGrammar Grammar { get; } = StaticGrammar;
        public CstNode Create(ParserTreeNode node)
        {
            switch (node.Type)
            {
                case "Attr": return new CstAttr(node, node.Children.Select(Create).ToArray());
                case "AttrList": return new CstAttrList(node, node.Children.Select(Create).ToArray());
                case "AttrValue": return new CstAttrValue(node, node.Children.Select(Create).ToArray());
                case "CData": return new CstCData(node, node.Contents);
                case "CDSect": return new CstCDSect(node, node.Children.Select(Create).ToArray());
                case "Content": return new CstContent(node, node.Children.Select(Create).ToArray());
                case "Document": return new CstDocument(node, node.Children.Select(Create).ToArray());
                case "DTD": return new CstDTD(node, node.Children.Select(Create).ToArray());
                case "DTDInternalSubset": return new CstDTDInternalSubset(node, node.Contents);
                case "Element": return new CstElement(node, node.Children.Select(Create).ToArray());
                case "EmptyElementTag": return new CstEmptyElementTag(node, node.Children.Select(Create).ToArray());
                case "EndTag": return new CstEndTag(node, node.Children.Select(Create).ToArray());
                case "Entity": return new CstEntity(node, node.Children.Select(Create).ToArray());
                case "HexEntityValue": return new CstHexEntityValue(node, node.Contents);
                case "Identifier": return new CstIdentifier(node, node.Contents);
                case "Misc": return new CstMisc(node, node.Children.Select(Create).ToArray());
                case "Name": return new CstName(node, node.Contents);
                case "NonEmptyElement": return new CstNonEmptyElement(node, node.Children.Select(Create).ToArray());
                case "NSIdent": return new CstNSIdent(node, node.Children.Select(Create).ToArray());
                case "NumericEntityValue": return new CstNumericEntityValue(node, node.Contents);
                case "PI": return new CstPI(node, node.Contents);
                case "Prolog": return new CstProlog(node, node.Children.Select(Create).ToArray());
                case "StartTag": return new CstStartTag(node, node.Children.Select(Create).ToArray());
                case "Tag": return new CstTag(node, node.Children.Select(Create).ToArray());
                case "Text": return new CstText(node, node.Contents);
                case "XmlDecl": return new CstXmlDecl(node, node.Children.Select(Create).ToArray());
                default: throw new Exception($"Unrecognized parse node {node.Type}");
            }
        }
    }
}
