// DO NOT EDIT: Autogenerated file created on 2024-01-26 1:43:40 AM. 
using System;
using System.Linq;
using Ara3D.Parsing;

namespace Parakeet.Cst.SExpressionGrammar
{
    /// <summary>
    /// Nodes = (Symbol|SymbolWithSpaces)
    /// </summary>
    public class CstAtom : CstChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.Atom;
        public CstAtom(params CstNode[] children) : base(children) { }
        public CstFilter<CstSymbol> Symbol => new CstFilter<CstSymbol> (Children);
        public CstFilter<CstSymbolWithSpaces> SymbolWithSpaces => new CstFilter<CstSymbolWithSpaces> (Children);
    }

    /// <summary>
    /// Nodes = (Expr)*
    /// </summary>
    public class CstDocument : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.Document;
        public CstDocument(params CstNode[] children) : base(children) { }
        public CstFilter<CstExpr> Expr => new CstFilter<CstExpr> (Children);
    }

    /// <summary>
    /// Nodes = (Atom|List)
    /// </summary>
    public class CstExpr : CstChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.Expr;
        public CstExpr(params CstNode[] children) : base(children) { }
        public CstFilter<CstAtom> Atom => new CstFilter<CstAtom> (Children);
        public CstFilter<CstList> List => new CstFilter<CstList> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstIdentifier : CstLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.Identifier;
        public CstIdentifier(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = (RecExpr)*
    /// </summary>
    public class CstList : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.List;
        public CstList(params CstNode[] children) : base(children) { }
        public CstFilter<CstRecExpr> RecExpr => new CstFilter<CstRecExpr> (Children);
    }

    /// <summary>
    /// Nodes = Expr
    /// </summary>
    public class CstRecExpr : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.RecExpr;
        public CstRecExpr(params CstNode[] children) : base(children) { }
        public CstFilter<CstExpr> Expr => new CstFilter<CstExpr> (Children);
    }

    /// <summary>
    /// Nodes = (Expr)*
    /// </summary>
    public class CstDocument : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.Document;
        public CstDocument(params CstNode[] children) : base(children) { }
        public CstFilter<CstExpr> Expr => new CstFilter<CstExpr> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstSymbol : CstLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.Symbol;
        public CstSymbol(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstSymbolWithSpaces : CstLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.SymbolWithSpaces;
        public CstSymbolWithSpaces(string text) : base(text) { }
        // No children
    }

}
