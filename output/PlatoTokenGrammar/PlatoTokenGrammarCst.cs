// DO NOT EDIT: Autogenerated file created on 2024-01-26 1:43:40 AM. 
using System;
using System.Linq;
using Ara3D.Parsing;

namespace Parakeet.Cst.PlatoTokenGrammar
{
    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstBinaryLiteral : CstLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.BinaryLiteral;
        public CstBinaryLiteral(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstBinaryOperator : CstLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.BinaryOperator;
        public CstBinaryOperator(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstBooleanLiteral : CstLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.BooleanLiteral;
        public CstBooleanLiteral(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstCharLiteral : CstLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.CharLiteral;
        public CstCharLiteral(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstComment : CstLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.Comment;
        public CstComment(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstDelimiter : CstLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.Delimiter;
        public CstDelimiter(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = Identifier
    /// </summary>
    public class CstFieldName : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.FieldName;
        public CstFieldName(params CstNode[] children) : base(children) { }
        public CstFilter<CstIdentifier> Identifier => new CstFilter<CstIdentifier> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstFloatLiteral : CstLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.FloatLiteral;
        public CstFloatLiteral(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = Identifier
    /// </summary>
    public class CstFunctionName : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.FunctionName;
        public CstFunctionName(params CstNode[] children) : base(children) { }
        public CstFilter<CstIdentifier> Identifier => new CstFilter<CstIdentifier> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstHexLiteral : CstLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.HexLiteral;
        public CstHexLiteral(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstIdentifier : CstLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.Identifier;
        public CstIdentifier(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstIntegerLiteral : CstLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.IntegerLiteral;
        public CstIntegerLiteral(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = (HexLiteral|BinaryLiteral|FloatLiteral|IntegerLiteral|StringLiteral|CharLiteral|BooleanLiteral|NullLiteral)
    /// </summary>
    public class CstLiteral : CstChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.Literal;
        public CstLiteral(params CstNode[] children) : base(children) { }
        public CstFilter<CstHexLiteral> HexLiteral => new CstFilter<CstHexLiteral> (Children);
        public CstFilter<CstBinaryLiteral> BinaryLiteral => new CstFilter<CstBinaryLiteral> (Children);
        public CstFilter<CstFloatLiteral> FloatLiteral => new CstFilter<CstFloatLiteral> (Children);
        public CstFilter<CstIntegerLiteral> IntegerLiteral => new CstFilter<CstIntegerLiteral> (Children);
        public CstFilter<CstStringLiteral> StringLiteral => new CstFilter<CstStringLiteral> (Children);
        public CstFilter<CstCharLiteral> CharLiteral => new CstFilter<CstCharLiteral> (Children);
        public CstFilter<CstBooleanLiteral> BooleanLiteral => new CstFilter<CstBooleanLiteral> (Children);
        public CstFilter<CstNullLiteral> NullLiteral => new CstFilter<CstNullLiteral> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstNullLiteral : CstLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.NullLiteral;
        public CstNullLiteral(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstOperator : CstLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.Operator;
        public CstOperator(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = Identifier
    /// </summary>
    public class CstParameterName : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.ParameterName;
        public CstParameterName(params CstNode[] children) : base(children) { }
        public CstFilter<CstIdentifier> Identifier => new CstFilter<CstIdentifier> (Children);
    }

    /// <summary>
    /// Nodes = (TypeKeyword|StatementKeyword)
    /// </summary>
    public class CstSeparator : CstChoice
    {
        public static Rule Rule = CstNodeFactory.Grammar.Separator;
        public CstSeparator(params CstNode[] children) : base(children) { }
        public CstFilter<CstTypeKeyword> TypeKeyword => new CstFilter<CstTypeKeyword> (Children);
        public CstFilter<CstStatementKeyword> StatementKeyword => new CstFilter<CstStatementKeyword> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstStatementKeyword : CstLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.StatementKeyword;
        public CstStatementKeyword(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstStringLiteral : CstLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.StringLiteral;
        public CstStringLiteral(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstTypeKeyword : CstLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.TypeKeyword;
        public CstTypeKeyword(string text) : base(text) { }
        // No children
    }

    /// <summary>
    /// Nodes = Identifier
    /// </summary>
    public class CstTypeName : CstNode
    {
        public static Rule Rule = CstNodeFactory.Grammar.TypeName;
        public CstTypeName(params CstNode[] children) : base(children) { }
        public CstFilter<CstIdentifier> Identifier => new CstFilter<CstIdentifier> (Children);
    }

    /// <summary>
    /// Nodes = ((Comment)*+TypeParameterToken+(Comment)*+(((Comment)*+TypeParameterToken))*+(Comment)*)
    /// </summary>
    public class CstTypeParametersToken : CstSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.TypeParametersToken;
        public CstTypeParametersToken(params CstNode[] children) : base(children) { }
        public CstFilter<CstComment> Comment => new CstFilter<CstComment> (Children);
        public CstFilter<CstTypeParameterToken> TypeParameterToken => new CstFilter<CstTypeParameterToken> (Children);
    }

    /// <summary>
    /// Nodes = ((Comment)*+TypeName+(Comment)*+((TypeParametersToken+(Comment)*))?)
    /// </summary>
    public class CstTypeParameterToken : CstSequence
    {
        public static Rule Rule = CstNodeFactory.Grammar.TypeParameterToken;
        public CstTypeParameterToken(params CstNode[] children) : base(children) { }
        public CstFilter<CstComment> Comment => new CstFilter<CstComment> (Children);
        public CstFilter<CstTypeName> TypeName => new CstFilter<CstTypeName> (Children);
        public CstFilter<CstTypeParametersToken> TypeParametersToken => new CstFilter<CstTypeParametersToken> (Children);
    }

    /// <summary>
    /// Nodes = 
    /// </summary>
    public class CstUnknown : CstLeaf
    {
        public static Rule Rule = CstNodeFactory.Grammar.Unknown;
        public CstUnknown(string text) : base(text) { }
        // No children
    }

}
